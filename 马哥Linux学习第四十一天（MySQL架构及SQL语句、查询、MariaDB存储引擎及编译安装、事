马哥Linux学习第四十一天（MySQL架构及SQL语句、查询、MariaDB存储引擎及编译安装、事务）

MySQL基础
	
	单进程多线程：
		用户连接：连接线程

	MySQL数据文件类型：
		数据文件、索引文件
		重做日志、撤销日志、二进制日志、错误日志、查询日志、慢查询日志、（中继日志）

	DDL & DML：
		索引管理：
			按特定数据结构存储的数据；

		索引类型：
			聚集索引、非聚集索引：数据是否与索引存储在一起；
			主键索引、辅助索引
			稠密索引、稀疏索引：是否索引了每一个数据项；
			B+ TREE、 HASE、R TREE
			简单索引、组合索引

			左前缀索引
			覆盖索引

		管理索引的途径：
			创建索引：创建表时指定；CREAT INDEX
				MariaDB [hellodb]> CREATE INDEX name ON students (Name);
			创建或删除索引：修改表的命令；
				MariaDB [hellodb]> ALTER TABLE students ADD INDEX(Age);
			删除索引：DROP INDEX


			查看表上的索引：
				SHOW {INDEX | INDEXES | KEYS}
			    {FROM | IN} tbl_name
			    [{FROM | IN} db_name]
			    [WHERE expr]

			EXPLAIN：分析将要执行的语句是否使用索引；

		视图：VIEW
			虚表

			创建方法：
				CREATE
				    [SQL SECURITY { DEFINER | INVOKER }]
				    VIEW view_name [(column_list)]
				    AS select_statement
				    [WITH [CASCADED | LOCAL] CHECK OPTION]

				MariaDB [hellodb]> CREATE VIEW test AS SELECT StuID,Name,Age FROM students;

			删除视图：
				DROP VIEW [IF EXISTS]
			    view_name [, view_name] ...
			    [RESTRICT | CASCADE]

			视图中的数据事实上存储于“基表”中，因此，其修改操作也会针对基表实现；其修改操作受基表限制；

	DML：
		INSERT, DELETE, UPDATE, SELECT

		INSERT：
			一次插入一行或多行数据；
			Syntax:
			INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
			    [INTO] tbl_name [(col_name,...)]
			    {VALUES | VALUE} ({expr | DEFAULT},...),(...),...
			    [ ON DUPLICATE KEY UPDATE
			      col_name=expr
			        [, col_name=expr] ... ]

			INSERT tab_name [(col,...)] VALUES (val1,....),(val21,...)

			MariaDB [hellodb]> INSERT INTO students (Name,Age,Gender) VALUES ('Jinjiao King',100,'M');

			Or:

			INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
			    [INTO] tbl_name
			    SET col_name={expr | DEFAULT}, ...
			    [ ON DUPLICATE KEY UPDATE
			      col_name=expr
			        [, col_name=expr] ... ]

			MariaDB [hellodb]> INSERT INTO students SET Name='Yinjiao King',Age=98,Gender='M';

			Or:

			INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]
			    [INTO] tbl_name [(col_name,...)]
			    SELECT ...
			    [ ON DUPLICATE KEY UPDATE
			      col_name=expr
			        [, col_name=expr] ... ]

		DELETE：
			DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM tbl_name
		    [WHERE where_condition]
		    [ORDER BY ...]
		    [LIMIT row_count]

		    注意：一定要有限制条件，否则将清空表中的所有数据；
		    	限制条件：
		    		WHERE
		    		LIMIT

		UPDATE：
			UPDATE [LOW_PRIORITY] [IGNORE] table_reference
			    SET col_name1={expr1|DEFAULT} [, col_name2={expr2|DEFAULT}] ...
			    [WHERE where_condition]
			    [ORDER BY ...]
			    [LIMIT row_count]
		    注意：一定要有限制条件，否则将修改所有行的指定字段；
		    	限制条件：
		    		WHERE
		    		LIMIT

		SELECT：

			Query Cache：

			查询执行路径中的组件：查询缓存、解析器、预处理器、优化器、查询执行引擎、存储引擎；

			SELECT语句的执行流程：
				FROM Clause --> WHERE Clause --> GROUP BY --> HAVING Clause --> ORDER BY --> SELECT --> LIMIT

			单表查询:
				SELECT
				    [ALL | DISTINCT | DISTINCTROW ]
				      [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]
				    select_expr [, select_expr ...]
				    [FROM table_references
				    [WHERE where_condition]
				    [GROUP BY {col_name | expr | position}
				      [ASC | DESC], ... [WITH ROLLUP]]
				    [HAVING where_condition]
				    [ORDER BY {col_name | expr | position}
				      [ASC | DESC], ...]
				    [LIMIT {[offset,] row_count | row_count OFFSET offset}]
				      [FOR UPDATE | LOCK IN SHARE MODE]]

				    DISTINCT：数据去重；
				    SQL_CACHE：显示指定存储查询结果于缓存之中；
				    SQL_NO_CACHE：显示查询结果不予缓存；

				    query_cache_type的值为ON时，查询缓存功能为开启；
				    	MariaDB [hellodb]> SHOW GLOBAL VARIABLES LIKE 'query%';
				    	SELECT的结果符合缓存条件即会缓存，否则，不予缓存；
				    	显示指定SQL_NO_CACHE，不予缓存；
				    query_cache_type的值为'DEMAND'时，查询缓存功能按需进行；
				    	显示指定SQL_CACHE的SELECT语句才会缓存；其它均不予缓存；

				    	查询命中状态：
				    		MariaDB [hellodb]> SHOW GLOBAL STATUS LIKE 'Qcache%';
				    	查询命令查询次数：
				    		MariaDB [hellodb]> SHOW GLOBAL STATUS LIKE 'Com_se%';

				字段显示可以使用别名：
					col1 AS alias1, col2 AS alias2, ....

						MariaDB [hellodb]> SELECT Name AS StudentName FROM students;
						MariaDB [hellodb]> SELECT Name StudentName FROM students;

				WHERE子句：指明过滤条件以实现“连接”的功能；
					过滤条件：布尔型表达式；

					算术操作符：+, -, *, /, %
					比较操作符：=, !=, <>, <=>, >, >=, <, <=

						BETWEEN min_num AND max_num
						IN (element1, element2,...)
							MariaDB [hellodb]> SELECT Name,Age FROM students WHERE Age IN (18,100);
						IS NULL：判断是否为NULL，值为NULL为真；
							MariaDB [hellodb]> SELECT * FROM students WHERE ClassID IS NULL;
						IS NOT NULL：判断是否为NULL，值为非NULL为真；
							MariaDB [hellodb]> SELECT * FROM students WHERE ClassID IS NOT NULL;
						LIKE：
							%：任意长度的任意字符；
							_：任意单个字符；
						RLIKE：
						REGEXP：匹配字符串可用正则表达式书写模式；

					逻辑操作符：
						NOT
						AND
						OR
						XOR

				GROUP：根据指定的条件把查询结果进行“分组”以用于做“聚合”运算；
					avg(), max(), min(), count(), sum()

					MariaDB [hellodb]> SELECT avg(Age), Gender FROM students GROUP BY Gender;

					MariaDB [hellodb]> SELECT avg(Age) AS Aage, Gender FROM students GROUP BY Gender HAVING Aage >20;

					MariaDB [hellodb]> SELECT count(StuID) AS NOS, ClassID  FROM students GROUP BY ClassID;

					HAVING：对分组聚合运算后的结果指定过滤条件；

				ORDER BY：根据指定的字段对查询结果进行排序；
					升序：ASC
					降序：DESC
						MariaDB [hellodb]> SELECT count(StuID) AS NOS, ClassID  FROM students GROUP BY ClassID ORDER BY NOS DESC;

				LIMIT [[offset,]row_count]：对查询的结果进行输出行数数量限制；
					MariaDB [hellodb]> SELECT * FROM students LIMIT 10;
					MariaDB [hellodb]> SELECT * FROM students LIMIT 10,10;

				对查询结果中的数据请求追加“锁”：
					FOR UPDATE：写锁，排他锁；
					LOCK IN SHARE MODE：读锁，共享锁；

				练习：导入hellodb.sql生成数据库
					# /usr/local/mysql/bin/mysql < hellodb.sql 
				(1) 在students表中，查询年龄大于25岁，且为男性的同学的名字和年龄；
					SELECT Name, Age FROM students WHERE Age > 25 AND Gender='M';

				(2) 以ClassID为分组依据，显示每组的平均年龄；
					SELECT avg(Age) AS Aage, ClassID FROM students GROUP BY ClassID;

				(3) 显示第2题中平均年龄大于30的分组及平均年龄；
					SELECT avg(Age) AS Aage, ClassID FROM students GROUP BY ClassID HAVING Aage > 30;

				(4) 显示以L开头的名字的同学的信息；
					SELECT * FROM students  WHERE Name LIKE 'L%';

				(5) 显示TeacherID非空的同学的相关信息；
					SELECT * FROM students WHERE TeacherID IS NOT NULL;

				(6) 以年龄排序后，显示年龄最大的前10位同学的信息；
					SELECT * FROM students ORDER BY Age DESC LIMIT 10;

				(7) 查询年龄大于等于20岁，小于等于25岁的同学的信息；用三种方法；
					SELECT * FROM students WHERE Age >=20 AND Age <= 25;
					SELECT * FROM students WHERE Age BETWEEN 20 AND 25;
					SELECT * FROM students WHERE Age IN (20,21,22,23,24,25);

			多表查询：
				交叉连接：笛卡尔乘积
					SELECT * FROM students, teachers;
				内连接：
					等值连接：让表之间的字段以“等值”建立连接关系；
						SELECT * FROM students,teachers WHERE students.TeacherID=teachers.TID;	
					不等值连接：
					自然连接：
					自连接：
						SELECT s.Name AS StuName, t.Name AS TeaName FROM students AS s, students AS t WHERE s.StuID=t.TeacherID;
				外连接：
					左外连接：
						FROM tb1 LEFT JOIN tb2 ON tb1.col=tab2.col
						SELECT s.Name,c.Class FROM students AS s LEFT JOIN classes AS c ON s.ClassID=c.ClassID;
					右外连接
						FROM tb1 RIGHT JOIN tb2 ON tb1.col=tab2.col
						SELECT s.Name,c.Class FROM students AS s RIGHT JOIN classes AS c ON s.ClassID=c.ClassID;

			子查询：在查询语句中嵌套着查询语句
				基于某语句的查询结果再次进行的查询

				用在WHERE子句中的子查询：
					（1）用于比较表达式中的子查询：子查询仅能返回单个值；
						SELECT Name,Age FROM students WHERE Age > (SELECT avg(Age) FROM students);

					（2）用于IN中的子查询：子查询应该单键查询并返回一个或多个值从而构成列表；
						SELECT Name,Age FROM students WHERE Age IN (SELECT Age FROM teachers);

					（3）用于EXISTS：

				用于FROM子句中的子查询：
					使用格式：SELECT tb_alias.col1,... FROM (SELECT clause) AS tb_alias WHERE Clause;

					示例：
					SELECT s.Aage,s.ClassID FROM (SELECT avg(Age) AS Aage,ClassID FROM students GROUP BY ClassID HAVING ClassID IS NOT NULL) AS s WHERE s.Aage > 30;

			联合查询：UNION
				将两张表查询的结果放到一起显示，并去掉重复的行；
				SELECT Name,Age FROM students UNION SELECT Name,Age FROM teachers;


			练习：导入hellodb.sql，以下操作在students表上执行
				1、以ClassID分组，显示每班的同学的人数；
					SELECT count(StuID),ClassID FROM students GROUP BY ClassID;

				2、以Gender分组，显示其年龄之和；
					SELECT sum(Age),Gender FROM students GROUP BY Gender;

				3、以ClassID分组，显示其平均年龄大于25的班级；
					SELECT avg(Age) AS Aage,ClassID FROM students GROUP BY ClassID HAVING Aage > 25;

				4、以Gender分组，显示各组中年龄大于25的学员的年龄之和；
					SELECT sum(Age),Gender FROM students WHERE Age >25 GROUP BY Gender;


			练习：导入hellodb.sql，完成以下题目：
				1、显示前5位同学的姓名、课程及成绩；
					 SELECT s.Name, c.Course, sc.Score FROM students AS s, courses AS c, scores AS sc WHERE s.StuID=sc.StuID AND sc.CourseID=c.CourseID;

				2、显示其成绩高于80的同学的名称及课程；
					SELECT s.Name, c.Course, sc.Score FROM students AS s, courses AS c, scores AS sc WHERE s.StuID=sc.StuID AND sc.CourseID=c.CourseID AND sc.Score > 80;

				3、求前8位同学每位同学自己两门课的平均成绩，并按降序排列；
					SELECT s.StuID, s.Name,avg(sc.Score) AS Ascore FROM students AS s, scores AS sc, courses AS c  WHERE s.StuID=sc.StuID  GROUP BY Name  ORDER BY Ascore DESC LIMIT 8;

				4、显示每门课程课程名称及学习了这门课的同学的个数；
					SELECT c.Course,count(sc.StuID) FROM courses AS c, scores AS sc WHERE c.CourseID=sc.CourseID GROUP BY c.Course;


			思考：
				1、如何显示其年龄大于平均年龄的同学的名字？
					使用子查询：
						 SELECT Name,Age FROM students WHERE Age > (SELECT avg(Age) FROM students);

				2、如何显示其学习的课程为第1、2，4或第7门课的同学的名字？
					SELECT Name,sc.CourseID,Course FROM students AS s, courses AS c, scores AS sc WHERE s.StuID=sc.StuID AND sc.CourseID= c.CourseID AND sc.CourseID IN (1,2,4,7);

				3、如何显示其成员数最少为3个的班级的同学中年龄大于同班同学平均年龄的同学？

				4、统计各班级中年龄大于全校同学平均年龄的同学。	


回顾：DDL，DML
	索引

MySQL存储引擎：
	
	表类型：
		CREATE TABLE ... ENGINE=

	InnoDB：
		处理大量的短期事务；
		数据存储于“表空间（table space）”中；
			（1）所有InnoDB表的数据和索引放置于同一个表空间中；
				表空间文件：datadir定义的目录下
					数据文件：ibddata1,ibddata2, ...

			（2）每个表单独使用一个表空间存储表的数据和索引；
				innodb_file_per_rable=ON

				数据文件(存储数据和索引)：tbl_name.ibd, 
				表格式定义：tbl_name,frm

		基于MVCC来支持高并发，支持所有的四个隔离级别，默认级别为REPEATABLE READ；间隙锁防止幻读；
		使用聚集索引；
		支持“自适应hash索引”
		锁粒度：行级锁

		MariaDB（XtraDB (percona)）

		数据存储：表空间
		并发：MVCC，间隙锁
		索引：聚集索引、辅助索引
		性能：预读操作、自适应hash、插入缓冲区
		备份：支持热备(xtrabackup)

	MyISAM：
		支持全文索引（FULLTEXT index）、压缩、空间函数(GIS)；但不支持事务，且为表级锁；
		崩溃后午饭安全恢复；

		使用场景：只读（或者写较少）、表较小（可以接受长时间修复操作）
			Aria：crash-safe

		文件：
			tbl_name.frm：表格式定义
			tbl_name.MYD：数据文件
			tbl_name.MYI：索引文件

		特性：
			加锁和并发：表级锁
			修复：手工或自动修复、但可能丢失数据
			索引：非聚集索引
			延迟更新索引键：
			压缩表

		行格式：dynamic，fixed，compressed，compact，redundant

	其它的存储引擎：
		CSV：将普通的CSV(字段通过逗号分隔)作为MySQL表使用；
		MRG_MYISA：将多个MyISAM表合并成为一个虚拟表；
		BLACKHOLE：类似于/dev/null，不真正存储任何数据；
		MEMORY：所有数据都保存于内存中，内存表；支持hash索引；表级锁；
			临时表
		PERFORMANCE_SCHEMA：伪存储引擎；
		ARCHIVE：数据归档，仅支持SELECT和INSERT操作；支持行级锁和专用缓存区；不支持事务；
		FEDERATED：用于访问其它远程MySQL服务器一个代理，它通过创建一个到远程MySQL服务器的客户端连接，并将查询传输到远程服务器执行，而后完成数据存取；
			在MariaDB的上实现是FederatedX

		MariaDB支持的其它存储引擎：
			OQGraph
			SphinxSE
			TokuDB
			Cassandra
			CONNECT
			SQUENCE

	编译安装mariadb
		需要事先安装开发环境：
			yum groupinstall "Development tools" "Server Platform Development"
		1、安装cmake
			yum install cmake

		2、创建系统用户
			# groupadd -r -g 306 mysql
			# useradd -r -g 306 -u 306 mysql
			# id mysql
			uid=306(mysql) gid=306(mysql) groups=306(mysql)

		3、下载并解压mariadb源码包
			src]# wget https://mirrors.tuna.tsinghua.edu.cn/mariadb//mariadb-5.5.56/source/mariadb-5.5.56.tar.gz
			src]# tar xf mariadb-5.5.56.tar.gz 

		4、创建一个lvm磁盘作为mariadb数据库的存放位置；
			# fdisk /dev/sdb
				Command (m for help): n
				Command action
				   e   extended
				   p   primary partition (1-4)
				p
				Partition number (1-4): 
				Value out of range.
				Partition number (1-4): 1
				First cylinder (1-1305, default 1): 
				Using default value 1
				Last cylinder, +cylinders or +size{K,M,G} (1-1305, default 1305): 
				Using default value 1305

				Command (m for help): p

				Disk /dev/sdb: 10.7 GB, 10737418240 bytes
				255 heads, 63 sectors/track, 1305 cylinders
				Units = cylinders of 16065 * 512 = 8225280 bytes
				Sector size (logical/physical): 512 bytes / 512 bytes
				I/O size (minimum/optimal): 512 bytes / 512 bytes
				Disk identifier: 0x4dbb86a7

				   Device Boot      Start         End      Blocks   Id  System
				/dev/sdb1               1        1305    10482381   83  Linux
				Command (m for help): t
				Selected partition 1
				Hex code (type L to list codes): 8e
				Changed system type of partition 1 to 8e (Linux LVM)

				Command (m for help): p

				Disk /dev/sdb: 10.7 GB, 10737418240 bytes
				255 heads, 63 sectors/track, 1305 cylinders
				Units = cylinders of 16065 * 512 = 8225280 bytes
				Sector size (logical/physical): 512 bytes / 512 bytes
				I/O size (minimum/optimal): 512 bytes / 512 bytes
				Disk identifier: 0x4dbb86a7

				   Device Boot      Start         End      Blocks   Id  System
				/dev/sdb1               1        1305    10482381   8e  Linux LVM

				Command (m for help): w
				The partition table has been altered!

				Calling ioctl() to re-read partition table.

				WARNING: If you have created or modified any DOS 6.x
				partitions, please see the fdisk manual page for additional
				information.
				Syncing disks.

			# partx -a /dev/sdb
			 BLKPG: Device or resource busy
			 error adding partition 1

			# pvcreate /dev/sdb1
			  Physical volume "/dev/sdb1" successfully created
			# vgcreate myvg /dev/sdb1
			  Volume group "myvg" successfully created
			# lvcreate -L 9G -n mydata myvg
			  Logical volume "mydata" created.
			# lvs
			  mydata  myvg     -wi-a-----  9.00g 

			# mke2fs -t ext4 /dev/myvg/mydata 

			# mkdir -pv /mydata
			# vim /etc/fstab 
			/dev/myvg/mydata	/mydata			ext4	defaults 	0 0
			# mount -a

			# mkdir /mydata/data
			# chown mysql.mysql /mydata/data/

		5、编译并安装：
			src]# cd mariadb-5.5.56
			mariadb-5.5.56]#cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mariadb-5.5.56 -DMYSQL_DATADIR=/mydata/data -DSYSCONFDIR=/etc -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DWITH_SSL=system -DWITH_ZLIB=system -DWITH_LIBWRAP=0 -DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci
			mariadb-5.5.56]# make
			mariadb-5.5.56]# make install

		6、初始化mariadb
			mariadb-5.5.56]# cd /usr/local
			local]# ln -sv mariadb-5.5.56 mysql
			`mysql' -> `mariadb-5.5.56'
			local]# cd mysql
			mysql]# chown -R root.mysql ./*

			mysql]# scripts/mysql_install_db --user=mysql --datadir=/mydata/data/
			mysql]# ls /mydata/data/
			aria_log.00000001  aria_log_control  mysql  performance_schema  test

		7、准备配置文件
			mysql]# mkdir /etc/mysql
			mysql]# cp support-files/my-large.cnf /etc/mysql/my.cnf

			# vim  /etc/mysql/my.cnf
			thread_concurrency = 2
			datadir = /mydata/data
			innodb_file_per_table = on
			skip_name_resolve = on

		8、准备服务脚本
			mysql]# cp support-files/mysql.server /etc/rc.d/init.d/mysqld
			mysql]# chmod +x /etc/rc.d/init.d/mysqld 
			mysql]# chkconfig --add mysqld

			# service mysqld start

			# pgrep -U mysql -l
			17426 mysqld

	并发控制：
		锁：
			读锁：共享锁
			写锁：独占锁

		锁粒度：
			表级锁
			行级锁

			锁策略：在锁粒度及数据安全性寻求的平衡机制；
				每种存储引擎都可以自行实现其锁策略和锁粒度；
				MySQL在服务器级也实现了锁，表级锁；用户可显示请求；
					(1) LOCK TABLES
					    tbl_name [[AS] alias] lock_type
					    [, tbl_name [[AS] alias] lock_type] ...

					lock_type:
					    READ [LOCAL]
					  | [LOW_PRIORITY] WRITE

					UNLOCK TABLES

					MariaDB [hellodb]> LOCK TABLES students WRITE;

					(2) FLUSH TABLES tb_name[,...] [WITH READ LOCK]

					(3) SELECT class [FOR UPDATE] [WITH READ LOCK]

		分类：
			隐式锁：由存储引擎自动施加锁；
			显示锁：

MySQL事务：
	
	事务：一组原子性的SQL查询，或者说一个独立工作单元。

		事务日志：


	ACID测试：
		A：atomicity,原子性；整个事务中的多有操作要么全部成功执行，要么全部失败后回滚；
		C：consistency，一致性；数据库总是从一个一致性状态转换为另一个一致性状态；
		I：Isolation，隔离性；一个事物所所做出的操作在提交之前，是不能为其它所见；隔离有多种隔离级别；
		D：durability，持久性，一旦事务提交，其所做的修改会永久保存于数据库中；

	事务：
		启动事务：START TRANSATION
			...
			...
		结束事务：
			（1）COMMIT：提交
			（2）ROLLBACK：回滚

		MariaDB [hellodb]> HELP Transactions;

		注意：只有事务型存储引擎方能支持此类操作；

		建议：显示请求和提交事务，而不要使用“自动提交功能；
			autocommit={1|0}

			MariaDB [hellodb]> show global variables like '%auto%';

		事务支持savepoint
			MariaDB [hellodb]> HELP SAVEPOINT
			Name: 'SAVEPOINT'
			Description:
			Syntax:
			SAVEPOINT identifier
			ROLLBACK [WORK] TO [SAVEPOINT] identifier
			RELEASE SAVEPOINT identifier

		事务隔离级别：
			READ UNCOMMITTED（读未提交）
			READ COMMITTED（读提交）
			REPEATABLE READ（可重读）
			SERIALIZABILE（可串行化）

			可能存在问题：
				脏读；
				不可重复读；
				幻读；
				加锁读；

			tx_isolation：服务器变量;默认为REPEATABLE-READ；可在SESSION级进行更改；
					SET tx_isolation=''
						READ-UNCOMMITTED
						READ-COMMITTED
						REPEATABLE-READ
						SERIALIZABILE

				MariaDB [hellodb]> SHOW GLOBAL ARIABLES LIKE '%isola%';
				+---------------+-----------------+
				| Variable_name | Value           |
				+---------------+-----------------+
				| tx_isolation  | REPEATABLE-READ |
				+---------------+-----------------+
				1 row in set (0.00 sec)

			MVCC：多版本并发控制

		死锁：
			两个或多个事务在一组资源相互占用，并请求锁定对方占用的资源的状态；

		事务日志：
			事务日志的写入类型为“追加”，因此其操作为“顺序IO”，此日志通常也被称为“预写式日志（write ahead logging）”；

			MariaDB [hellodb]> SHOW GLOBAL VARIABLES LIKE 'innodb%';
			| innodb_log_file_size                      | 5242880                |
			| innodb_log_files_in_group                 | 2                      |
			| innodb_log_group_home_dir                 | ./                     |


















