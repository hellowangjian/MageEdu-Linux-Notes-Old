vim命令和find命令入门到精通



回顾：

	正则表达式（BRE,ERE)

		BRE：

			字符匹配：.,[],[^]

			次数匹配：*,\?,\+,\{m\},\{m,n\}

			位置锚定：^,$,\<,\>

			分组及引用：\(\),\1,\2,...

		ERE：

			字符匹配：.,[],[^]

			次数匹配：*,?,+,{m},{m,n}

			位置锚定：^,$,\<,\>

			分组及引用：(),\1,\2,...

			或者：|



	grep, egrep, fgrep

		文本过滤器：PATTERN

		-v,-o,-i,-q,-A,-B,-C



	wc, cut, sort, uniq, patch



vim编辑器

	文本编辑器：

		文本：纯文本，ASCII text；Unicode；



	文本编辑种类：

		行编辑器：sed

		全屏编辑器：nano，vi



		vi：Virsual Interface

		vim：VI IMproved



	vim：

		模式化的编辑器

			基本模式：

				编辑模式，命令模式

				输入模式

				末行模式：

					内置的命令行接口



			打开文件：

				# vim [OPTION] [file..]

					+#：打开文件后，直接让光标处于第#行的行首；
						~]# vi +5 fstab
					+/PATTERN：打开文件后，直接让光标处于第一个被PATTERN匹配到的行的行首；
						~]# vi +/if functions
					+：打开文件后，直接让光标处于最后一行行首；
						~]# vi + fstab

			模式转换：
				编辑模式：默认模式
					编辑模式-->输入模式：
						i：insert，在光标所在处输入；
						a：append，在光标所在初后方输入；
						o：在光标所在处下方打开一个新行输入；
						I：在光标所在行的行首输入；
						A：在光标所在行的行尾输入；
						O：在光标所在处上方打开一个新行输入；

					输入模式-->编辑模式：
						esc

					编辑模式-->末行模式：
						:

					末行模式-->编辑模式：
						esc

			关闭模式：
				编辑模式下：
					ZZ：保存并退出；
				末行模式下：
					:q：退出；
					:q!：强制退出，不保存此前的编辑操作；
					:wq：保存并退出；
						:w，:q
					:x：保存并退出；
					:w /PATH/TO/SOMEFILE：另存文件；

			光标跳转：
				字符间跳转：
					  k
					h   l
					  j

					h：左
					j：下
					k：上
					l：右

					#COMMAND：跳转由#指定的个数的字符

				单词间跳转：
					w：下一个单词的词首；
					e：当前或后一个单词的词尾；
					b：当前或前一个单词的词首；

					#COMMAND：跳转由#指定的个数的单词

				行首行尾跳转：
					^：跳转至行首的第一个非空白字符；
					0：跳转至行首；
					$：跳转至行尾；

				行间跳转：
					#G：跳转至由#指定的行的行首；
					1G,gg：跳转至第一行；
					G：跳转至最后一行；

				句间跳转：
					)：前一句
					(：下一句
				段间跳转：
					}：前一段
					{：下一段

			翻屏：
				Ctrl+f：向文件尾部翻一屏；
				Ctrl+b：向文件首部翻一屏；
				Ctrl+d：向文件尾部翻半屏；
				Ctrl+u：向文件首部翻半屏；
				Enter：按行向后翻

			vim的编辑命令：
				字符编辑：
					x：删除光标所在处的字符；
					#x：删除光标所在处起始的#字符；

					xp：交换光标所在处的字符与其后面的字符的位置；

				替换命令(replace)：
					r：替换光标所在处的字符；

				删除命令
					d：删除命令，可结合光标跳转字符，实现范围删除；
						d$：删除当前光标所在处至行尾的内容；
						d^：删除当前光标所在处至行首的内容；
						dw：删除当前光标所在处至下一个单词词首；
							#COMMAND：删除当前光标所在处至由#指定的个数的单词；
						de：
						db：
						dd：删除当前光标所在处的一行；
							#dd：删除当前光标所在处的行起始的共#行；

				粘贴命令(p,put,paste)：
					p：缓冲区中的内容如果为整行，则粘贴在当前光标所在行的下方；否则，粘贴至当前光标所在行的后方；
					P：缓冲区中的内容如果为整行，则粘贴在当前光标所在行的上方；否则，粘贴至当前光标所在行的前方；

				复制命令(yank,y)：
					y：复制，工作行为相似于d命令；
						y$
						y^
						y0
						ye
						yw
						yb
							#COMMAND
						yy：复制一行；
							#yy：复制＃行；

				改变命令(change,c)：
					编辑模式-->输入模式，实现删除操作；
						c$
						c^
						c0

						cb
						ce
						cw
							#COMMAND

						cc：删除光标所在的行，并转换为输入模式；
							#cc：

			其它编辑操作：
				可视化模式：
					v：按字符选定；
					V：按行选定；

					结合编辑命令：d,c,y

				撤销(undo)操作：
					u：撤销此前的操作；
						#u：撤销此前的#个操作；

				撤销此前的撤销：
					Ctrl+r

				重复执行前一个编辑操作：
					.

			vim自带的练习教程：vimtutor

	vim末行模式：
		内建的命令行接口

		(1)地址定界
			:start_pos[,end_pos]
				#：特定的第#行，例如5即第5行；
				.：当前行；
				$：最后一行；
				#,#：指定行范围，左侧为起始行，右侧为结束行；
				#,+#：指定行范围，左侧为起始行绝对行号，右侧为相对左侧行号的偏移量；例如：3,+7
					.,$-1：从当前行到倒数第二行；
					1.$：全文；
				%：全文
				/pattern/：从光标所在处起始向文件尾部第一次被模式所匹配到的行；
					/first/,$：
				/pat1/,/pat2/：从光笔所在处起始，第一次由pat1匹配到的行开始，至第一次由pat2匹配到的行结束之间的所有行；

			可同编辑命令一同使用，实现编辑操作：
				d
				y
				c

				w /PATH/SOMEFILE：讲范围内的文本保存至指定的文件中；
				r /PATH/FROM/SOMEFILE：讲指定文件中的文本读取并插入至指定位置；
					:5r test.txt

		(2)查找
			/PATTERN：从当前光标所在处向文件尾部查找能够被当前模式匹配到的所有字符串；
			?PATTERN：从当前光标所在处向文件首部查找能够被当前模式匹配到的所有字符串；

		(3)查找并替换
			s：末行模式的命令；使用格式：
				s/要查找的内容/替换为的内容/修饰符
					要查找的内容：可使用正则表达式；
					替换为的内容：不能使用正则表达式，但可以引用；
						如果“要查找的内容”部分在模式中使用使用分组符号：在“替换为的内容”中使用后向引用；
						直接引用查找模式匹配到的全部文件,要使用&符号；
					修饰符：
						i：查找时忽略大小写；
						g：全局替换，意味着一行中如果匹配到多次，则均替换；
							1，20s/this/This/g

				可把分隔符替换为其它字符：
					s@@@
					s###

			示例：
				%s@\<t\([[:alpha:]]\+\)\>@T\1@g
				%s@\<t[[:alpha:]]\+\>@&er@g

			练习：
				1、复制/etc/grub2.cfg文件至/tmp目录中，用查找替换命令删除/tmp/grub1.cfg文件中以空白字符开头的行的行首的空白字符；
					~]#%s@^[[:space:]]\+@@
				2、复制/etc/rc.d/init.d/functions文件至/tmp目录中，用查找替换命令为/tmp/functions文件的每个以空白字符开头的行的行首加上#；
					~]#%s@^[[:space:]]\+[^[:space:]]@#&@g
				3、为/tmp/grub2.cfg文件的前三行的行首加上#号；
					~]#1,3s@.*@#&@
				4、将/etc/yum.repos.d/CentOS-Base.repo文件中所有的enabled=0替换为enabled=1，所有gpgcheck=0替换为gpgcheck=1；
					~]#%s@\(enabled\|gpgcheck\)=0@\1=1@g

vim的多文件功能：
	
	多文件
		vim FILE1 FILE2...

			在文件间切换：
				:next 下一个
				:prev 上一个
				:first 第一个
				:last 最后一个

			退出所有文件：
				:wqall 保存所有文件并退出；
				:wall
				:qall
	多窗口：
		-o：水平分割窗口
		-O：垂直分割窗口

		在窗口间切换：Ctrl+w, ARROW

		注意：单个文件也可以分割为多个窗口进行查看：
			Ctrl+w,s：水平分割窗口；
			Ctrl+w,v：垂直分割窗口；

定制vim的工作特性：
	注意：在末行模式下的设定，仅对当前vim进程有效；
	永久有效：
		全局：／etc/vimrc
		用户个人：~/.vimrc
	1、行号
		显示：set number，简写为set num
		不显示：set noumber，set nonu

	2、括号匹配高亮
		匹配：set showmatch, set sm
		取消：set nosm

	3、自动缩进
		启用：set ai
		禁用：set noai
	4、高亮搜索
		启用：set hlsearch
		禁用：set nohlsearch
	5、语法高亮
		启用：syntax on
		禁用：syntax off
	6、忽略字符大小写
		启用：set ic 
		禁用：set noic

	获取帮助：
		:help
		:help subject

	课外作业：
		如何设置tab键缩进4个字符；


bash脚本编程之算术运算

	+, -, *, /, **, %

	算术运算格式：
		(1)let VAR=算术运算表达式
		(2)VAR=$[算术运算表达式]
			echo "$[1+2]"
		(3)VAR=$((算术运算表达式))
		(4)eVAR=$(expr $ARG1 $OP $ARG2)

		注意：乘法符号在有些场景中需要使用转义符；

	练习：写一个脚本，完成如下功能：
		添加三个用户；
		求此三个用户的UID之和；
		#!/bin/bash
		for i in {1..3};do
		useradd user$i
		echo user$i | passwd --stdin user$i
		echo "user$i was create success!"
		done

		declare -x sum=0

		for i in $(tail -3 /etc/passwd | cut -d: -f3);do
		sum=$[$sum+$i]
		done
		echo "sum is $sum"









