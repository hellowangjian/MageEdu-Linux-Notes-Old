马哥Linux学习第四十二天（MySQL用户、权限管理及查询缓存，索引和explain，备份恢复的基本概念）

MySQL用户和权限管理
	
	权限类别：
		库级别
		表级别
		字段级别
		管理类
		程序类

		管理类：
			CREATE TEMPORARY TABLES
			CREATE USER
			FILE
			SUPER
			SHOW DATABASES
			RELOAD
			SHUTDOWN
			REPLICATION SLAVE
			REPLICATION CLIENT
			LOCK TALBES
			PROCESS

		程序类：
			FUNCTION
			PROCEDURE
			TRIGGER

			CREATE, ALTER, DROP, EXCUTE

		库和表级别：TABLE or DATABASE
			ALTER  
			CREATE
			CREATE VIEW
			DROP
			INDEX
			SHOW VIEW
			GRANT OPTION：能够把自己获得的权限赠给其它用户一个副本；

		数据操作：
			SELECT
			INSERT
			DELETE
			UPDATE

		字段级别：
			SELECT(col1,col2,...)
			UPDATE(col1,col2,...)
			INSERT(COL1,COL2,...)

		所有权限：ALL PRIVILEGES, ALL

		元数据数据库：mysql
		 	授权表：
		 		db，host，user
		 		cloumns_priv, tables_priv, proxies_priv

	用户账号：
		'USERNAME'@'HOST'：
			@'HOST'：
				主机名：
				IP地址或Network；
				通配符：
					%,_：172.16.%。%

		创建用户：CREATE USER
			CREATE USER 'USERNAME'@'HOST' [IDENTIFIED BY 'password'];
		修改密码：
			（1）SET PASSWORD FOR
				SET PASSWORD FOR 'root'@'localhost' = PASSWORD('mageedu');
			（2）UPDATE mysql.user SET password=PASSWORD('your_password') WHERE clause;
			（3）mysqladmin password
					mysqladmin [OPTIONS] command command....
						-u
						-h
						-p
		查看用户获得的授权：SHOW GRANTS FOR
			SHOW GRANTS FOR 'USERNAME'@'HOST';

		重命名用户：RENAME USER
			RENAME USER old_user_name TO new_user_name

		删除用户：DROP USER 'USERNAME'@'HOST';

		忘记管理员密码的解决办法：
			（1）启动mysqld进程时，为其使用：--skip-grant-tables --skip-networking
				--skip-grant-tables：启动时不加载授权表
				--skip-networking：禁止网络连接登录
			（2）使用UPDATE命令修改管理员密码
			（3）重启mysqld；

	授权：GRANT
		GRANT priv_type[,...] ON [{table|function|procedure}] db.{table|routine} TO 'USERNAME'@'HOST' [IDENTIFIED BY 'password'] [REQUIRE SSL] [WITH with_option]

			with_option:
			    GRANT OPTION
			  | MAX_QUERIES_PER_HOUR count
			  | MAX_UPDATES_PER_HOUR count
			  | MAX_CONNECTIONS_PER_HOUR count
			  | MAX_USER_CONNECTIONS count

	取消授权：REVOKE
		REVOKE priv_type [(column_list)] [, priv_type [(column_list)]] ... ON [object_type] priv_level FROM user [, user] ...
			MariaDB [hellodb]> REVOKE SELECT ON *.* FROM 'test'@'0.0.0.0';

	练习：授权test用户通过任意主机连接当前mysqld，但每秒钟最大查询次数不得超过5次；此账户的同时连接次数不得超过3次；

查询缓存：
	
	如何判断是否命中：
		通过查询语句的哈希值判断：哈希值考虑的因素包括
			查询本身、要查询的数据库、客户端使用协议版本，...

			查询语句任何字符上的不同，都会导致缓存不能命中；

	哪些查询可能不会被缓存？
		查询中包含UDF、存储函数、用户自定义变量、临时表、mysql库中系统表、或者包含列级权限的表、有着不确定值的函数(Now())；

	查询缓存相关的服务器变量：
		MariaDB [hellodb]> SHOW GLOBAL VARIABLES LIKE '%query%';
		query_cache_min_res_unit：查询缓存中内存块的最小分配单位；
			较小的值会减少浪费，但会导致更频繁的内存分配操作；
			较大的值会带来浪费，会导致碎片过多；
		query_cache_limit：能够缓存的最大查询结果；
			对于有着较大结果的查询语句，建议在SELECT中使用SQL_NO_CACHE
		query_cache_size：查询缓存总共可用的内存空间；单位是字节，必须是1024的整数倍；
		query_cache_type：ON,OFF,DEMAND
		query_cache_wlock_invalidate：如果某表被其它的连接锁定，是否仍然可以从查询缓存中返回结果；默认值为OFF，表示可以在表被其它连接锁定的场景中继续从缓存返回数据；ON则表示不允许；

	查询相关的状态变量：
		MariaDB [hellodb]> SHOW GLOBAL STATUS LIKE 'Qcache%';
		+-------------------------+----------+
		| Variable_name           | Value    |
		+-------------------------+----------+
		| Qcache_free_blocks      | 1        |
		| Qcache_free_memory      | 16752904 |
		| Qcache_hits             | 94       |
		| Qcache_inserts          | 99       | # 缓存的次数
		| Qcache_lowmem_prunes    | 0        | 
		| Qcache_not_cached       | 81       |
		| Qcache_queries_in_cache | 4        | 
		| Qcache_total_blocks     | 12       |
		+-------------------------+----------+

		缓存命中率的评估：Qcache_hits/(Qcache_hits+Com_select)

MySQL中的索引：

	基本法则：索引应该构建在被用作查询条件的字段上；

	索引类型：
		B+ Tree索引：顺序存储，每一个叶子结点到根结点的距离是相同的；左前缀索引，适合查询范围类的数据；

		可以使用B-Tree索引的查询类型：全键值、键值范围或键前缀查找；
			全值匹配：精确某个值，"JinjiaoKing"；
			匹配最左前缀：只精确匹配左前部分，"Jin%"；
			匹配范围值：
			精确匹配某一列并范围匹配另一列：
			只访问索引的查询

		不适合食用B-Tree索引的场景：
			如果不从最左列开始，索引无效：(Age,Name)
			不能跳过索引中的列：(StuID,Name,Age)
			如果查询中某个列是为范围查询，那么其右侧的列都无法再使用索引优化查询：(StuID,Name)

		Hash索引：基于哈希表实现，特别适用于精确匹配索引中的所有列；
			注意：只用Memory存储引擎支持显示hash索引；

			不适合使用hash索引的场景：
				存储的非为值的顺序，因此，不适用于顺序查询；
				不支持模糊匹配；

		空间索引（R-Tree）：
			MyISAM支持空间索引：
		全文索引(FULLTEXT)：
			在文本中查找关键词；

		索引优点：
			索引可以降低服务器需要扫描的数据量，减少了IO次数；
			索引可以帮助服务器避免排序和使用临时表；
			索引可以帮助服务器将随机I/O转为顺序I/O；

		高性能索引策略：
			独立使用列，尽量避免其参与运算；
			左前缀索引：索引构建于字段的左侧的多少个字符，要通过索引选择性来评估
				索引选择性：不重复的索引值和数据表的记录总数的比值；
			多列索引：
			选择合适的索引列次序，将选择性最高放左侧；

		冗余和重复索引：
			不好的索引使用策略
				(Name),(Name,Age)

	通过EXPLAIN来分析索引的有效性：

		EXPLAIN SELECT clause
			获取查询执行计划信息，用来查看查询优化器如何执行查询；

			输出:
				id：当前查询语句中，每个SELECT语句的编号；

					复杂类型的查询有三种：
						简单子查询：用于where子句中
						用于FROM中的子查询
						联合查询：UNION

					注意：UNION查询的分析结果中会出现一个额外的匿名临时表；

				select_type:
					简单查询为SIMPLE
					复杂查询：
						SUBQUERY：简单子查询；
							MariaDB [hellodb]> EXPLAIN SELECT Name,Age FROM students WHERE Age > ( SELECT avg(Age) FROM students)\G
						DEVIVED：用于FROM中的子查询；
						UNION：UNION语句的第一个之后的SELECT语句；
						UNION RESULT：匿名临时表；
							MariaDB [hellodb]> EXPLAIN SELECT Name FROM students UNION SELECT Name FROM teachers\G

				table：SELECT语句关联到的表；

				type：关联类型，或访问类型，即MySQL决定的如何查询表行的方式；
					ALL：全表扫描；
					index：根据索引的次序进行全表扫描；如果在Extra列出现“Using Index”表示使用了覆盖索引，而非全表扫描；
					range：有范围限制的根据索引实现范围扫描；扫描位置始于索引中的某一点，结束于另一点；
					ref：根据索引返回表中所有匹配某单个值的所有行；
					eq_ref：仅返回一个行，但需要额外与某个参考值做比较；
					const,system：直接返回单个行；
					NULL

				possible_keys：查询可能会用到的索引；

				key：查询中使用了的索引；

				key_len：在索引中使用的字节数；

				ref：在利用key字段所表示的索引完成查询时所用的列或某常量值；

				rows：MySQL估计为找到所有的目标行而需要读取的行数；

				Extra：额外信息
					Using index：MySQL将会使用覆盖索引，以避免访问表；
					Using where：MySQL服务器将在存储引擎检索后，再进行一次过滤；
					Using temporary：MySQL对结果排序时会使用临时表；
					Using filesort：对结果使用一个外部索引排序；

以下笔记来自2016全新第41天（半天）

回顾：用户和权限、缓存、索引
	权限：管理类权限、库、表、字段
		GRANT，REVOKE

	缓存：query cache
		服务器变量
		状态变量

	索引：EXPLAIN

CentOS7 编译安装mariadb
	修改语言：
		# localectl set-locale LANG_US.UTF-8
		# localectl status
   	System Locale: LANG=en_US.UTF-8
       VC Keymap: us
      X11 Layout: us

    1、安装开发工具
    	# yum groupinstall "Development Tools"
    2、安装依赖包
    	# yum install ncurses-devel openssl-devel libevent-devel jemalloc-devel cmake
    		注意：jemalloc-devel在epel源；
    3、下载源码包
    	src]# wget https://mirrors.tuna.tsinghua.edu.cn/mariadb//mariadb-5.5.56/source/mariadb-5.5.56.tar.gz
    4、解压并安装
    	src]# tar xf mariadb-5.5.56.tar.gz 
    	src]# cd mariadb-5.5.56/

    	mariadb-5.5.56]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mariadb-5.5.56 -DMYSQL_DATADIR=/data/mysql -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_ARIA_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DWITH_SSL=system -DWITH_ZLIB=system -DWITH_LIBWRAP=0 -DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci
    	mariadb-5.5.56]# make && make install
    5、准备用户及数据库存放路径
    	# groupadd -r -g 306 mysql
    	# useradd -r -g 306 -u 306 mysql

    	# mkdir /data/mysql -pv
    	# chown mysql.mysql /data/mysql

    6、准备systemd service unit file
    	# vim /usr/lib/systemd/system/mariadb.service
	    	# Don't forget to reload systemd daemon after you change unit configuration:
	    	# root> systemctl --system daemon-reload
	    	# 
	    	[Unit]
	    	Description=MariaDB database server
	    	After=syslog.target
	    	After=network.target
	    	#
	    	[Service]
	    	Type=simple
	    	User=mysql
	    	Group=mysql
	    	#
	    	# Note: we set --basedir to prevent probes that might trigger SELinux alarms;
	    	ExecStart=/usr/local/mysql/bin/mysqld_safe --basedir=/usr/local/mysql
	    	#
	    	# Give a reasonable amount of time for the server to start up/shut down 
	    	TimeoutSec=300
	    	#
	    	# Place temp files in a secure directory, not /tmp 
	    	PrivateTmp=false
	 		#
	    	[Install]
	    	WantedBy=multi-user.target

	    # systemctl daemon-reload

	7、初始化mariadb
		mariadb-5.5.56]# cd /usr/local
		local]# ln -sv mariadb-5.5.56 mysql
		`mysql' -> `mariadb-5.5.56'
		local]# cd mysql
		mysql]# chown -R root.mysql ./*

		mysql]# scripts/mysql_install_db --user=mysql --datadir=/data/mysql
		mysql]# ls /data/mysql
		aria_log.00000001  aria_log_control  mysql  performance_schema  test

	8、准备配置文件
		mysql]# mkdir /etc/mysql
		mysql]# cp support-files/my-large.cnf /etc/mysql/my.cnf

		# vim  /etc/mysql/my.cnf
		thread_concurrency = 2
		datadir = /data/mysql
		innodb_file_per_table = on
		skip_name_resolve = on

	9、启动服务
		# systemctl start mariadb.service

MaiaDB日志

	查询日志：query log；
	慢查询日志：slow query log；
	错误日志：error log；
	二进制日志：binary log；
	中继日志：reley log；
	事务日志：transaction log；

	1、查询日志：
		记录查询操作：
			文件：file
			表：table

		MariaDB [hellodb]> SHOW GLOBAL VARIABLES LIKE '%log%';
		general_log=ON|OFF：是否启用查询日志
		general_log_file=HOSTNAME.log：当log_output有FILE类型时，日志信息的记录位置；
		log_output=TABLE|FILE|NONE：日志输出的类型，NONE为不启用日志；

	2、慢查询日志
		查询执行时长超出指定时长的查询操作；
			MariaDB [hellodb]> SHOW GLOBAL VARIABLES LIKE 'long_query_time%';
			+-----------------+-----------+
			| Variable_name   | Value     |
			+-----------------+-----------+
			| long_query_time | 10.000000 |
			+-----------------+-----------+

			MariaDB [hellodb]> SELECT @@GLOBAL.long_query_time;
			+--------------------------+
			| @@GLOBAL.long_query_time |
			+--------------------------+
			|                10.000000 |
			+--------------------------+

			修改时长：
				SET GLOBAL log_query_time=

		MariaDB [hellodb]> SHOW GLOBAL VARIABLES LIKE '%log%';
		slow_query_log=ON|OFF：是否启用慢查询日志；
		slow_query_log_file=HOSTNAME-slow.log：日志文件；
		log_slow_filter = admin,filesort,filesort_on_disk,full_join,full_scan,query_cache,query_cache_miss,tmp_table,tmp_table_on_disk ：过滤，需要记录的查询事件；
		log_slow_queries = OFF：是否启用慢查询日志；
		log_slow_rate_limit = 1：记录日志的速率；
		log_slow_verbosity：详细级别；

	3、错误日志：
		mysqls启动和关闭过程中输出的事件信息；
		mysqld运行中产生的错误信息；
		event scheduler运行一个event时产生的日志信息；
		在主从复制架构中的从服务器上启动从服务器线程时产生的日志信息；	

	4、二进制日志：
		导致数据改变或潜在导致数据改变的SQL语句；
		功能：用于通过“重放”日志文件中的事件来生成数据副本；

		SHOW {BINARY | MASTER} LOGS：查看mariadb自行管理使用中的二进制日志文件列表；
		SHOW MASTER STATUS：查看正在使用中的二进制日志文件；
		SHOW BINLOG EVENTS [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count]：显示指定的二进制日志文件中的事件；

		log_error=/PATH/TO/LOG_ERROR_FILE：错误日志存储路径；
		log_warnings=1|0：是否纪录警告信息至错误日志文件中；

		二进制日志记录格式：
			基于“语句”记录：statement
			基于“行”记录：row
			混合模式：mixed，让系统自行判定该基于哪种方式进行；

		二进制日志文件的构成：
			日志文件：mysql-bin.文件名后缀，二进制格式
			索引文件：mysql-bin.index，文本格式

		服务器变量：
			sql_log_bin=ON|OFF：是否记录二进制日志；
			log_bin=/PATH/TO/LOGFILENAME：记录二进制日志的路径及文件名，是否记录二进制日志；
				log_bin=mysql-bin
			binlog_format=STATEMENT|ROM|MIXED：二进制日志记录的格式；
			max_binlog_size=1073741824：单个二进制日志文件的最大体积，默认为1G；
				注意：（1）到达最大值会自动滚动；（2）文件达到上限时的大小未必为指定的精确值；
			sync_binlog=1|0：设定是否启动二进制日志同步功能；

		mysqlbinlog：客户端命令工具
			mysqlbinlog [OPTIONS] log file
				--start-position
				--stop-postition

				--start-datetime=
				--stop-datetime=
					YYYY-MM-DD hh:mm:ss
			# ./bin/mysqlbinlog  /data/mysql/mysql-bin.000004

		二进制日志事件的格式：
			# at 328
			#170702 14:49:07 server id 1  end_log_pos 433 	Query	thread_id=1	exec_time=0	error_code=0
			use `mydb`/*!*/;
			SET TIMESTAMP=1498978147/*!*/;
			CREATE TABLE t1 (id INT, Name varchar(30))
			/*!*/;
			DELIMITER ;
			# End of log file

			事件发生的日期和时间：170702 14:49:07
			事件发生的服务器标识：server id 1
			事件的结束位置：end_log_pos 433
			事件的类型：Query
			事件发生时所在服务器执行此事件的线程的ID：hread_id=1
			语句的时间戳与将其写入二进制文件中的事件差：exec_time=0
			错误代码：error_code=0
			事件内容：use `mydb`/*!*/;
					SET TIMESTAMP=1498978147/*!*/;
					CREATE TABLE t1 (id INT, Name varchar(30))

			GTID：Global Transaction ID;
				专属属性：GTID
					事件所属的全局事务的GTID：（GTID 0-1-2）

	5、中继日志：
		复制架构中，从服务器用于保存从主服务器的二进制日志中读取到的事件；
		relay_log

	6、事务日志：transaction 
		事务行存储引擎自行管理和使用；

		redo log
		undo log

备份和恢复：
	
	为什么备份？
		灾难恢复：硬件故障、软件故障、自然灾害、黑客攻击、误操作；
		测试：

	要注意的要点：
		能容忍最多丢失多少数据；
		恢复数据需要在多长时间内完成；
		需要恢复哪些数据；

		（1）做还原测试，用于测试备份的可用性；
		（2）还原演练

	备份类型：
		完全备份，部分备份：
			完全备份：整个数据集；
			部分备份：只备份数据子集；

		完全备份、增量备份、差异备份
			增量备份：仅备份最近一次完全备份或增量备份（如果存在增量）以来变化的数据；
			差异备份：仅备份最近一次完全备份以来的变化的数据；

		热备份、温备份、冷备份
			热备：读写操作均可执行；
			温备：读操作可执行，但写操作不能；
			冷备份：读写操作均不可进行；

			MyISAM：温备，不能热备；
			InnoDB：热备；

		物理备份、逻辑备份
			物理备份：直接复制数据文件进行备份；
			逻辑备份：从数据库中“导出”数据另存而进行的备份；

			逻辑备份：与存储引擎无关；

	备份时需要考虑的因素：
		持锁多久
		备份过程的时长
		备份负载
		恢复过程的时长

	备份什么？
		数据
		二进制日志，InnoDB的事务日志
		代码（存储过程、存储函数、触发器、事件调度器）
		服务器的配置文件

	设计备份方案：
		数据集：完全+增量；
		备份手段：物理，逻辑；

	备份工具：
		mysqldump：逻辑备份工具，适用所有存储引擎，温备；完全备份、部分备份；对InnoDB存储引擎支持热备；
		cp,tar等文件系统复制归档工具：物理备份工具，适用所有存储引擎；冷备；完全备份，部分备份；
		lvm2的快照：几乎热备；借助于文件系统管理工具实现物理备份；
		mysqlhotcopy：几乎冷备；仅适用于MyISAM存储引擎；

	备份工具的选择：
		mysqldump+复制binlog：
			mysqldump：完全备份；
			复制binlog中指定时间范围的event：增量备份；

		lvm2快照+复制binlog：
			lvm2快照：使用cp或tar等做物理备份；完全备份；
			复制binlog中指定时间范围的event：增量备份；

		xtrabackup：
			由Percona提供的支持对InnoDB做热备(物理备份)的工具；
				完全备份、增量备份；

	














