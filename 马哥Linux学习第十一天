马哥Linux学习第十一天

回顾：
	yum：
		yum --> repository
			yum：配置文件
			repository：
					createrepo
						元数据
		COMMAND：
			install,reinstall,groupinstall,localinstall
			remove,groupremove
			repolist,grouplist,list,groupinfo,search,info
			clean,makecache
			update,groupdate
			provides,whatprovides
		配置repository：
			[repoid]
			name=
			baseurl=
				file:///,ftp://,http://
			enabled=
			gpgcheck=
			gpgkey=URL
			cost=
	for：
		C风格：
			for ((变量初始；循环条件；变量修正表达式));do
				循环体
			done

			循环嵌套：
				for i in LIST1;do
					for j iin LIST2;do
						循环体
					done
				done

文件压缩、解压缩和归档
	compress/uncompress .Z

	gzip/gunzip .gz

	bzip2/bunzip2 .bz2

	xz/unxz .xz

	zip/unzip .zip 更通用的压缩格式

	1、gzip/gunzip
		.gz

		语法：gzip [OPTIONS] /PATH/TO/SOMEFILE...
			-#：指明压缩比；1-9，默认为6，数字越大，压缩比越大；
			-d：decompress，解压缩，相当于gunzip；
			-c：将压缩后的数据输入至标准输出；
				gzip -c /PATH/TO/SOMEFILE > /PATH/TO/SOMEFILE.gz
					[root@www ~]# ls -lh me*
					-rw-------. 1 root root 50K 9月  29 21:55 messages
					[root@www ~]# gzip -c messages > messages.gz
					[root@www ~]# ls -lh me*
					-rw-------. 1 root root  50K 9月  29 21:55 messages
					-rw-r--r--. 1 root root 5.3K 9月  29 22:01 messages.gz
			-r：递归至目录中对每个文件进行压缩；

		zcat /path/to/somefile.gz：无须显示解压缩查看压缩文件的内容；

	2、bzip2/bunzip2
		.bz2

		语法：bzip2 [OPTIONS] /PATH/TO/SOMEFILE...
			-#：指明压缩比；1-9，默认为6，数字越大，压缩比越大；
			-d：decompress，解压缩，相当于bunzip2；
			-k：压缩后保留原文件；

			bzcat /path/to/somefile.bz2：无须显示解压缩查看压缩文件的内容；

	3、xz/unxz
		.xz

		语法：xz [OPTIONS] /PATH/TO/SOMEFILE...
			-#：指明压缩比；1-9，默认为6，数字越大，压缩比越大；
			-d：decompress，解压缩，相当于unxz；
			-k：压缩后保留原文件；

		xzcat /path/to/somefile.xz：无须显示解压缩查看压缩文件的内容；

	4、zip/unzip
		.zip

		语法：zip ZIP_FILE.zip /PATH/TO/SOMEFILE...
			zip可以将多个文件压缩归档成单个文件
				root@www ~]# zip myzip.zip fstab messages
				adding: fstab (deflated 55%)
				adding: messages (deflated 89%)

		unzip语法：unzip ZIP_FILE.zip

	5、归档工具
		将多个文件打包为单个文件以便于管理：默认不会执行压缩；
			tar，cpio

		语法：
			归档：tar [OPTIONS] -c -f /PATH/TO/TARFILE.tar /PATH/TO/FILE...
				归档：不会删除原文件；
					[root@www ~]# tar -c -f  mytarfile.tar fstab messages
					[root@www ~]# ll mytarfile.tar fstab messages -h
					-rw-r--r--. 1 root root 805 9月  29 22:24 fstab
					-rw-------. 1 root root 50K 9月  29 21:55 messages
					-rw-r--r--. 1 root root 60K 9月  29 22:34 mytarfile.tar

			展开归档：tar -x -f /PATH/TO/TARFILE.tar [-C /PATH/TO/DIR]
					root@www ~]# tar -x -f mytarfile.tar 
					[root@www ~]# ll mytarfile.tar fstab messages -h
					-rw-r--r--. 1 root root 805 9月  29 22:24 fstab
					-rw-------. 1 root root 50K 9月  29 21:55 messages
					-rw-r--r--. 1 root root 60K 9月  29 22:34 mytarfile.tar

			查看被归档的文件列表：tar -t -f /PATH/TO/TARFILE.tar
					[root@www ~]# tar -t -f mytarfile.tar 
					fstab
					messages

			注意：
				（1）多个选项可以合并，但-f由于要带参数，因此，应该放在最右侧；
					-tf,-xf,-cf
				（2)选项引导符-可省略
					tar xf, tar cf
						[root@www ~]# tar tf mytarfile.tar 
						fstab
						messages

	6、归档和压缩
		-z：gzip
			后缀名：.tar.gz
			归档并压缩：tar -zcf
			展开归档：tar -zxf
		-j：bzip2
			后缀名：.tar.bz2
			归档并压缩：tar -jcf
			展开归档：tar -jxf
		-J：xz
			后缀名：.tar.xz
			归档并压缩：tar -Jcf
			展开归档：tar -Jxf

		注意：展开归档可以直接使用tar -xf，而无需为其指定对应的压缩工具选项；

Linux的程序包管理(3)
	
	rmp包管理器：rpm
	rpm包管理器的前端工具：yum

		包中的文件：编译好的二进制程序、库文件、头文件、帮助文件和配置文件；

	源文件：编译成二进制程序，
		程序文件与平台就有了相关性；
		程序特性也就被确定了；
		rpm包的版本较老；

	手动编译源代码文件：
		依赖环境：编译开发工具、以及各个被依赖到的程序包的开发组件；
			编译开发工具：
				包组：
					Development Tools
					Server Platform Development
					Desktop Platform Developmet
					Debug Tools

			被依赖的程序包的开发组件：
				两种方式：
					(1)编译安装被依赖的程序；
					(2)安装相关程序的名称中包含devel的子包；

		源代码文件：
			分割保存多个文件中；文件间或许存在依赖关系，因此，编译时可能需要按特定次序进行编译；

			此时，一般会使用项目管理工具（通常也称为构建工具）对其进行管理；
				构建工具会调用合适的编译器，并根据配置文件中定义的次序对源代码进行编译；

				GNU make：
					配置文件：makefile

			注意：
				(1)每个项目的程序员开发完成某版本之后，会使用autoconfig为程序代码生成一个脚本文件：configure；此脚本会收集当前系统上的开发环境中所依赖的各组件的版本、特性等，并检查所依赖的环境是否能满足，最后会根据Makefile.in生成一个makefile文件；
				(2)每个项目的程序员开发完成某版本之后，会使用automake为程序代码生成一个Makefile模版文件，即Makefile.in；

			编译人员的编译安装过程：
				（1）运行configure脚本；
					常用选项：
						安装路径：
							--prefix=/usr/local/nginx
						启用或禁用的特性：
						依赖的程序包：
				（2）运行make命令，完成项目构件；
				（3）运行make install命令，完成安装；
				注意：前两部只需要普通用户权限，建议使用普通用户进行；最后一步根据安装路径的指定，可能会用到管理员权限；

				configure脚本的应用；
					--help：查看帮助信息；
					--prefix：指定默认安装路径
					--sysconfig：指定配置文件安装路径

					--with-CAPABILITY
					--without-CAPABILITY

					--enable-FEATURE
					--disable-FEATURE

					例如：
						~]# useradd -r nginx
						~]# id nginx
						uid=496(nginx) gid=493(nginx) 组=493(nginx)
						nginx-1.6.2]# ./configure --prefix=/usr/local/nginx --conf-path=/etc/nginx/nginx.conf --user=nginx --goup=nginx
						~]# yum install pcre-devel -y

	程序运行环境：
		二进制文件：$PATH环境变量指明路径下，/bin, /sbin, /usr/bin, /usr/sbin, /usr/local/bin, /usr/local/sbin

		自己编译的程序文件安装路径如果不在PATH环境变量指定的程序搜索路径中；
			（1）使用绝对路径
			（2）编辑PATH环境变量，加入此程序文件所在目录；
				export PATH=extra_path:$PATH
					root@www bin]# export PATH=/usr/local/apache/bin:$PATH

				把上面的命令保存于/etc/profile.d/*.sh文件中，记得source重读环境变量文件；

		库文件：
			大多数应用程序都依赖于标准库某些共享库文件，甚至于某些应用提供的特定的库文件；

			Linux系统会在特定路径下为应用查找所依赖的库文件：/lib64, /lib, /usr/lib64, /usr/lib
				库文件映射缓存文件：/etc/ld.so.cache 

			自己编译安装的程序提供的库文件有可能不在系统搜索路径中，解决办法；
				两步骤：
					(1) 编辑/etc/ld.so.conf.d/*.conf文件，添加新的库文件搜索路径至此文件中，每行一个；
					(2) 执行ldconfig命令，重新生成库文件映射缓存ld.so.cache

		ldconfig命令：
			- configure dynamic linker run-time bindings
				用于生成：/etc/ld.so.cache 

				常用选项：
					-p：打印当前系统ld.so.cache中已经缓存的所有库文件目录以及库文件映射列表；
					-v：显示命令行执行过程的详细信息；

		头文件导出方案：
			方法：
				（1）复制所有新生成的头文件至/usr/include目录中；
				（2）创建连接
					ln -sv /usr/local/apache/include /usr/include/httpd
					ln -sv /usr/local/apache/include/* /usr/include/

		man手册文件：
			Linux会到特定目录下查找用户需要使用命令手册
				路径：/etc/man.config配置文件中，使用MANPATH指令指向的路径；

				解决方法：
					（1）在此/etc/man.config文件中新增MANPATH指令，并指向新的命令手册路径；
					（2）在man命令执行时，使用-M选项显示指定手册页查找路径即可；
						man -M /etc/local/apache/man httpd

		注意：如果安装的程序是一个服务类程序，rpm安装的方式通常会自动生成服务脚本文件（此文件为rpm制作者所提供），但编译安装不会有；

		注意：编译安装的程序包，尽可能把所有文件安装至一个专用路径下，卸载时删除此目录即可；

	其它程序语言开发的源码包，编译安装方式可能会有所不同；
		INSTALL, README

		例如：perl,python,ruby,java


bash脚本编程之条件测试：
	
	过程式编程语言
		顺序：逐条执行
		选择：只执行代码段某一部分
		循环：把某部分代码反复执行

	bash命令执行结束后有退出状态码：
		0-255：
			0：成功执行
			1-255：执行失败

		根据此前命令的退出状态来决定后续操作是否继续；获取此前命令退出状态的过程就称为条件测试；

		bash中的测试实现方式有两种：
			（1）直接根据前一个命令的退出结果做测试；
				测试成功与否意义与命令运行的返回值可能没有直接对应意义；
			（2）测试表达式：
				通常需要将其用命令的形式来进行表示；
					整数测试
					字符串测试
					文件测试

				转为命令格式：
					test EXPRESSION
					[ EXPRESSION ]
					[[ EXPRESSION ]]
			整数测试：
				双目操作符：需要两个操作数；
					$A -gt $B：大于
					-ge：大于等于
					-lt：小于
					-le：小于等于
					-ne：不等于
					-eq：等于

	练习：写一个脚本
		通过命令行传递一个参数给脚本，参数为用户名
		如果用的id号大于等于500，则显示此用户为普通用户；
			#!/bin/bash
			#

			user=$*
			userid=$(id -u $user)

			if [ $userid -ge 500 ]; then
				echo "This user is Normal User!"
			fi


	if语句的形式：
		if CONDITION;then
		fi

		if CONDITION; then
			分支1
		else
			分支2
		fi

回顾：
	压缩归档：
		gzip/gunzip/zcat
		zip2/bunzip2/bzcat
		xz/unxz/xzcat
		zip/unzip

		归档：
			# tar -cf, # tar-zcf, tar -jcf, tar -Jcf
			# tar -xf
				-C /path/to/somedir
			# tar -tf

	源码编译安装
		前提：开发环境（Development Tools，Server Platform Development）
		编译安装（GNU make，gcc）
			标准三步骤：
				configure
				make
				make install
		安装后：
			（1）输出二进制程序文件所在的目录至PATH环境变量；
			（2）输出库文件所在的目录至系统搜索库的位置：/etc/ld.so.conf.f/*.conf,ldconfig
			（3）头文件：链接方式；
			（4）man手册页：/etc/man.config中MANPATH，man －M

		练习：编译httpd，并启动之；
			生成Makefile:
			[root@www httpd-2.2.31]# ./configure --prefix=/usr/local/apache --sysconfdir=/etc/httpd/ --enable-so

			编译：
			[root@www httpd-2.2.31]# make

			安装：
			[root@www httpd-2.2.31]# make install

			设置环境变量：
			[root@www bin]# export PATH=/usr/local/apache/bin:$PATH
			[root@www ~]# vim /etc/profile.d/apache.sh
				export PATH=/usr/local/apache/bin:$PATH

			设置库文件：
			[root@www ~]# vim /etc/ld.so.conf.d/apache.conf
						/usr/local/apache/lib
			[root@www ~]# ldconfig -p | grep /usr/local/apache/lib
			[root@www ~]# ldconfig
			[root@www ~]# ldconfig -p | grep /usr/local/apache/lib
				libexpat.so.0 (libc6,x86-64) => /usr/local/apache/lib/libexpat.so.0
				libexpat.so (libc6,x86-64) => /usr/local/apache/lib/libexpat.so
				libaprutil-1.so.0 (libc6,x86-64) => /usr/local/apache/lib/libaprutil-1.so.0
				libaprutil-1.so (libc6,x86-64) => /usr/local/apache/lib/libaprutil-1.so
				libapr-1.so.0 (libc6,x86-64) => /usr/local/apache/lib/libapr-1.so.0
				libapr-1.so (libc6,x86-64) => /usr/local/apache/lib/libapr-1.so

			设置头文件：
			[root@www lib]# ln -sv /usr/local/apache/include /usr/include/httpd
			"/usr/include/httpd" -> "/usr/local/apache/include"

			设置man手册：
			[root@www apache]# vim /etc/man.config 
				MANPATH /uar/local/apach/man

			启动http服务：
			[root@www apache]# apachectl start

	bash条件测试：
		条件式代码运行

		测试方式：
			（1）以前一条命令的退出状态码(布尔型值：真或假)作为测试条件；
			（2）测试表达式：转换为命令方式
				三种形式：
					test EXPRESSION
					[ EXPRESSION ]
					[[ EXPRESSION ]]
				三种常用的测试表达式：
					整数测试、字符串测试、文件测试

		整数测试：双目
			$A -gt $B
				-ge
				-ne
				-eq
				-lt
				-le

bash编程之条件测试（2）：
	
	bash中每个命令执行结束后都有退出码：
		0-255
			0：成功
			1-255：失败

	bash脚本自身运行结束也会有退出码：
		退出码取决于最后一跳运行的语句或命令的退出码；

		自定义脚本的退出码；
			exit [0-255]

			Note：脚本运行时，无论何时执行了exit，将结束当前bash进程;

	组合测试条件：
		条件取反：!

练习：写一个脚本
		通过命令行传递一个参数给脚本，参数为用户名
		如果用的id号大于等于500，则显示此用户为普通用户；

		#!/bin/bash
		#

		if [ $# -lt 1 ];then
			echo "Plz input a parament!"
			exit 2
		fi

		if ! id $1 &> /dev/null;then
			echo "No such user!"
			exit 1
		fi

		userid=$(id -u $1)

		if [ $userid -ge 500 ];then
			echo "This user is common user!"
		fi

练习：求100以内所有偶数之和；要求遍历100以内的所有正整数；
	#!/bin/bash
	#

	declare -i sum=0

	for ((i=1;i<=100;i++));do
		if [ $[$i%2] -eq 0 ];then
			let sum+=$i
		fi
	done
	echo "Even sum is $sum"

练习：写一个脚本
	传递一个以上的参数作为用户名给脚本；
	判断这些用户的UID是否与GID相同；相同则显示之；
	#!/bin/bash
	#

	if [ $# -lt 1 ];then
		echo "Plz input a parament!"
		exit 2
	fi

	for i in $@;do
		if ! id $i &> /dev/null;then
			echo "NO such user $i !"
			exit 1
		fi
	done

	for i in $@;do
		if ! id $i &> /dev/null;then
			echo "NO such user $i !"
			exit 1
		fi

		if [ $(id -u $i) -eq $(id -g $i)];then
			echo -n "UID same as GID:"
			echo "$i" 
		fi
	done

练习：写一个脚本
	（1）添加10用户user1-user10；密码同用户名；
	（2）用户不存在时才添加；存在时则跳过；
		#!/bin/bash
		#

		declare -i usercount=0
		for i in {1..10};do
			if ! id user$i &> /dev/null;then
				useradd user$i
				echo user$i | passwd --stdin user$i &> /dev/null
				let usercount++
				echo "Create user user$i finshed."
			fi
		done 
		echo "Total user added:$usercount"

练习：写一个脚本
	（1）用ping命令测试172.16.250.20-172.16.250.100以内有哪些主机在线，将在线的主机显示出来；
		#!/bin/bash
		#

		for ((i=10;i<=100;i++));do
			if ping -w 1 -c 1 172.16.250.$i &> /dev/null; then
				echo "162.16.250.$i is up."
			fi
		done


	双分支if语句：

		if CONDITION-is-TRUE;then
			分支1
		else
			分支2
		fi

		练习：写一个脚本
		（1）用ping命令测试172.16.250.20-172.16.250.100以内有哪些主机在线，将在线的主机显示出来；
			#!/bin/bash
			#

			for ((i=100;i<=150;i++));do
				if ping -w 1 -c 1 172.16.227.$i &> /dev/null; then
					echo -e "\033[32m172.16.227.$i\033[0m is up."
				else
					echo -e "\033[31m172.16.227.$i\033[0m is down"
				fi
			done

		练习：写一个脚本，遍历100以内所有正整数，并分别求出所有偶数与所有奇数之和；
			#!/bin/bash
			#

			declare -i evensum=0
			declare -i oddsum=0

			for ((i=1;i<=100;i++));do
				if [ $[$i%2] -eq 0 ];then
					let evensum+=$i
				else
					let oddsum+=$i
				fi
			done
			echo "Even sum is $evensum"
			echo "Odd sum is $oddsum"

		练习：写一个脚本,添加10个用户
		（1）如果用户存在，则说明其已经存在；
		（2）如果用户不存在，则添加之，并说明添加OK；
		（3）最后显示本次共添加了多少用户；
			#!/bin/bash
			#

			declare -i sum=0

			for i in {1..10};do
				if id user$i &> /dev/null;then
					echo "user 'user$i' already exists" 
				else 
					useradd user$i
					echo "Create 'user$i' OK!"
					let sum++
				fi
			done
			echo "Addet $sum user"


		练习：写一个脚本，传递n个正整数给脚本，返回其最大值和最小值；
			#!/bin/bash
			#

			if [ $# -lt 1 ];then
				echo "1 parmater."
				exit 1
			fi

			declare -i minimum=$1
			declare -i maximum=$1

			for i in $@;do
				if [ $i -gt $maximum ];then
					let maximum=$i
				fi

				if [ $i -lt $minimum ];then
					let $minimum=$i
				fi
			done

			echo "Maximun is $maximum; Minimum is $minimum"

		练习：打印九九乘法表；
			#!/bin/bash
			#

			for i in {1..9};do
				for j in {1..9};do
					if [ $i -ge $j ];then
						echo -n -e "${j}X${i}=$[$i*$j]\t"
					fi
				done
				echo
			done

			#!/bin/bash
			#

			for ((i=1;i<=9;i++));do
				for ((j=1;j<=$i;j++));do
					echo -n "${i}X${j}=$[$i*$j] "
				done
				echo
			done

	字符串测试：$str1, $str2
		双目：
			"$str1" > "$str2"：测试str1是否大于str2，是为真，不是则为假；
			<：是否小于；
			==：是否等于；
			!=：都否不等于；

		单目：
			-z "$str1"：测试str1字符串是否为空，空则为真，不空则为假；
			-n "$str1"：测试str1字符串是否为不空，不空则为真，空则为假；

		模式匹配测试：
			"$str1" =~ PATTERN：
				如果str1字符串能够被后面的模式所匹配则为真，否则为假；

		练习：写一个脚本，判断当前系统上所有用户的shell是否为可登录shell（即用户的shell不是/sbin/nologin），分别统计这两类用户的个数；通过字符串比较来实现；
			#!/bin/bash
			#
			declare -i loginshell=0
			declare -i nologin=0

			for shell in $(cut -d: -f7 /etc/passwd);do
				if [ "$shell" == '/sbin/nologin' ];then
					let nologin++
				else
					let loginshell++
				fi
			done

			echo "Login shell Users:$loginshell,No login shell Users:$nologin"

		练习：写一个脚本
			（1）获取当前主机的主机名，保存于hostname变量中；
			（2）判断此变量的值是否为localhost，如果是，则将当前主机名修改为www.magedu.com；
			（3）否则，则显示当前主机名；
				#!/bin/bash
				#

				host=$(hostname)

				if [ "$host" == 'localhost' ];then
					hostname www.magedu.com
					echo "The hostname is:$(hostname)."
				else
					echo "The hostname is:$host."
				fi

		练习：写一个脚本，完成如下功能
			（1）传递一个磁盘文件路径给脚本，判断此设备是否存在：
			（2）如果存在，则显示此设备上的所有分区信息；
				#!/bin/bash
				#

				if ! [[ "$1" =~ ^/dev/[sh]d[a-z]$ ]]; then
					echo "Not a device file."
					exit 1
				fi

				if fdisk -l /dev/[hs]d[a-z] | grep "^Disk" | grep "$1" &> /dev/null; then
					fdisk -l $1
				else
					echo "No such device!"
				fi

	多分支的if语句：
		语法结构：
			if CONDITION1-is-TRUE;then
				分支1
			elif CONDITIO2-is-TRUE;then
				分支2
			elif CONDITION3-is-TRUE;then
				分支3
			...
			...
			else
				分支n
			fi

		Note：
			(1)测试自上而下逐条件进行；
			(2)遇到符合条件的，即遇到某为真的测试条件后，将不再进行后续的条件测试；

		示例；写一个脚本，完成如下功能
			脚本能够接受一个参数：
			（1）如果参数1为quit，则显示退出脚本，并执行正常退出；
			（2）如果参数1为yes，则显示继续执行脚本；
			（3）否则，参数1为其它任意值，均执行非正常退出；
				#!/bin/bash
				#

				if [[ "$1" =~ ^QUIT|Quit|quit$ ]];then
					echo "Finished."
					exit 0
				elif [ "$1" == 'yes' ];then
					echo "Continue"
				else
					echo "Unknow parameter!"
					exit 1
				fi

		练习：写一个脚本，完成如下功能
			传递一个参数给脚本，此参数为gzip、bzip2或者xz三者之一；
			（1）如果参数1的值为gzip，则使用tar和gzip归档压缩/etc目录至/backups目录中，并命名为/backups/etc-20150413.tar.gz;
			（2）如果参数1的值为zip2，则使用tar和zip2归档压缩/etc目录至/backups目录中，并命名为/backups/etc-20150413.tar.bz2;
			（3）如果参数1的值为xz，则使用tar和xz归档压缩/etc目录至/backups目录中，并命名为/backups/etc-20150413.tar.xz;
			（4）其它任意值，则显示错误的压缩工具，并执行非正常退出；




