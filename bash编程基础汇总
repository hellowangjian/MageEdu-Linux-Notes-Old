base编程基础汇总

	编程语言：

		编译型语言：编译器，c，c＋＋

		解释型语言：解释器

			解释器可独立运行

	程序：指令＋数据

	程序：算法＋数据结构

	变量：保存数据的载体：命名的内存空间；

		declare -x|i|-r

		本地变量：Name=VALUE, unset Name

		环境变量：export Name＝VALUE

		局部变量：local Name=VALUE

		位置参数变量：$1, $2, ...

		特殊变量：$?

	shell脚本：shebang

	#!/bin/bash

	#!/usr/bin/python

	#!/usr/bin/perl

	脚本文件，其它以#开头的行均为注释行，将会被解释器忽略；

	bash脚本：内核会启动一个专门shell进程来运行程序文件：脚本运行结束，此shell进程也即终止；

		过程式编程语言：

			顺序执行

			选择执行：测试条件，当条件满足时，执行其中对应条件下的那部分代码；

			循环执行：一段代码被反复执行多次；循环需要有退出条件；

	练习：

		1、创建一个组newgroup，id号8088
			# groupadd -g 8088 newgroup

		2、创建一个用户，名字为stu1，id号为5005,以newgroup为附加组
			# useradd -u 5005 -G newgroup stu1
			# id stu1
			uid=5005(stu1) gid=5005(stu1) 组=5005(stu1),8088(newgroup)

		3、创建目录/tmp/hellobash
			# mkdir /tmp/hellobash

		4、复制/etc/rc.d/rc.sysinit至/tmp/hellobash目录中
			# cp /etc/rc.d/rc.sysinit /tmp/hellopbash

	运行的方法：

		1、给脚本以执行权限，而后指定脚本路径运行；

			内核会通过读取脚本文件第一行来判断启动什么解释器来运行此脚本；

		2、显示给定解释器来运行；

			＃ bash SCRIPT_FILE

		bash命令能检查脚本语法错误，

			-n

			注意：不是命令语法错误

			-x：调试运行

	位置参数变量：

		./myscript.sh hello magedu

			$1,$2

	特殊变量：

		$0：当前脚本的完整路径名

	循环执行：

		bash中的循环控制语句：

			for

			while

			until

		for循环

			语法：

				for 变量名 in 列表；do

					循环体

				done

			运行特性：

				第一遍：将列表中的第一个元素赋值“变量名”定义的变量，而后执行完成的循环体；

				第二遍：

				...

				直到元素遍历结束，循环退出

		示例：添加10个用户：stu100，stu109；密码同用户名；

			for username in stu100 stu101 sti102;do

				useradd $username

				echo $username | passwd --stdin $username

			done

		列表的生成方式：

			1、直接列出：

			2、生成整数列表：

				(1){start_num..end_num}，例如{0..9}

				(2)seq LAST或

				   seq FIRST LAST

				   seq FIRST STEP LAST

				   注意：seq是命令，所以要使用命令引用对其结果进行引用；

			3、用命令的执行结果生成

		示例：添加上述的10个用户

			for i in {0..9}; do

				useradd stu10$i

				echo stu10$i | passwd --stdin stu10$i

			done

	练习：

		1、创建目录/tmp/testdir-当前日期时间；

			#!/bin/bash

			dirpath=/tmp/testdir-$(date +'%F-%H-%M-%S')

			mkdir $dirpath

			for i in {1..100};do

				touch $dorpath/file$i

				echo -e "Create \033[31mfile$i\033[0m finished."

			done

		2、在此目录中创建100个空文件：file1-file100

		3、显示/etc/passwd文件中位于偶数行的用户的用户名

 			lines=$(wc -l /etc/passwd | cut -d' ' -f1)

 			for i in $(seq 2 2 $lines);do

 				head -$i /etc/passwd | tail -1 | cut -d: -f1

 			done

 		4、创建10个用户user10-user19；密码同用户名；

 		5、在/tmp/目录下创建10个空文件file10-file19;

 		6、把file10的属主和属组改为user10，依次类推；

 		#!/etc/bash

		dirpath=/tmp/file1

		for i in $(seq 0 9);do

		 useradd user1$i

		 echo user1$i | passwd --stdin user1$i

		 touch $dirpath$i

		 chown user1${i}:user1${i} $dirpath$i

		done

	流程控制语句：for循环
		for Var_Name in List; do
			循环体
		done
		List的生成方式：
			1、整数序列：{start..end},例如：{1..10}
			2、整数序列：seq start step end,例如：$(seq 1 2 10)
			3、命令的执行结果：例如，$(ls /var)
	变量类型：
		位置参数变量：在脚本中用于引用传递给脚本的参数
			$1, $2, ..., ${10}, ...
				[root@vBird scripts]# vim pos1.sh
				[root@vBird scripts]# chmod +x pos1.sh 
				[root@vBird scripts]# ./pos1.sh hello world
				first paramenter:hello
				second paramenter:world
				script name:./pos1.sh
				[root@vBird scripts]# cat pos1.sh 
				#!/bin/bash
				#
				echo "first paramenter:$1"
				echo "second paramenter:$2"
				echo "script name:$0"
		特殊变量：
			$?：保存上一条命令的执行结果成功与否的状态，用数字表示，0-255；0表示成功，非0均为失败；
			$0：在脚本中用于引用传递给脚本名称本身；
			$#：保存传递给当前脚本的参数的个数；
				[root@vBird scripts]# cp pos1.sh pos2.sh
				[root@vBird scripts]# vim pos2.sh 
				[root@vBird scripts]# cat pos2.sh
				#!/bin/bash
				#
				echo "first paramenter:$1"
				echo "second paramenter:$2"
				echo "script name:$0"
				echo "there are $# parameter(s)."
				[root@vBird scripts]# ./pos2.sh hello world 
				first paramenter:hello
				second paramenter:world
				script name:./pos2.sh
				there are 2 parameter(s).
				[root@vBird scripts]# ./pos2.sh hello world  how are you
				first paramenter:hello
				second paramenter:world
				script name:./pos2.sh
				there are 5 parameter(s).
			$*：保存传递给当前脚本的所有参数；
				用单个字串保存传递给脚本的所有参数
			$@：保存传递给当前脚本的所有参数；
				用多个字串保存传递给脚本的所有参数
	练习：写一个脚本
		(1)接受一个以上文件路径作为参数；
		(2)显示每个文件拥有的行数；
		(3)总结说明本次共为几个文件统计了其行数；
			#!/bin/bash
			#
			echo "Files:$@"
			for file in $@; do
			    lines=$(wc -l $file | cut -d' ' -f1)
			    echo "$file has $lines line(s)."
			done
			echo "Total files:$#."
			~]#./fileshow.sh /etc/fstab /etc/rc.d/rc.sysinit
			
	练习：写一个脚本
		(1)传递两个以上字符串当作用户名；
		(2)创建这些用户；且密码同用户名；
		(3)总结说明共创建了几个用户；
			#!/bin/bash
			#
			for user in $@; do
			        useradd $user
			        echo $user | passwd --stdin $user &> /dev/null
			done
			echo "Total Create User:$#."
	算术运算：
		如何定义整型变量？
			(1)let Var_Name=INTEGER_VALUE
				let num1=3
			(2)declare -i Var_Name=INTEGER_VALUE
				declare -i num2=6
				两边：
					declare -i num3
					num3=7
		注意：即使没有定义变量类型为整型，字符型的整数依然可以参与算术运算，是因为bash会进行隐式的数据类型转换；
		bash的算术运算：
			(1) let：let Var_Name=ARITHMATIC_EXPRESSION
					示例：
						# num1=3
						# num2=4
						# let sum=${num1}+${num3}
						# echo $sum
			(2) $[]：Var_Name=$[ARITHMATIC_EXPRESSION]
					示例：
						＃ sum=$[$num1+$num2]
			(3) $(())：Var_Name=$((ARITHMATIC_EXPRESSION))
					示例：
						# sum=$(($num1+$num2))
						or # echo $(($num1+$num2))
			(4) expr命令：Var_Name=$(expr EXPREESSION)
						 Var_Name=$(expr $ARGU1 operator $ARGU2)
					示例：
						# sum=$(expr $num1 + $num2)
			算术运算：
				+：加
				-：减
				*：乘
				/：除
				%：取模，取余数
				**：幂运算
			增强型赋值：
				变量与自身做某种算术运算，而后将结果存回自身；
					+=
						let a+=2
					-=
					*=
					/=
					%=
						
					自加：++,例如let a++,相当于a=$[$a+1],也相当于let a+=1
					自减：--
			帮助：help let
		示例：
			计算100以内所有正整数之和：
			#!/bin/bash
			#
			declare -i sum=0
			for i in {1..100}; do
			        let sum=$[$sum+$i]
			done
			echo "Summary is $sum"
		练习：
			计算100以内所有偶数之和；
				#!/bin/bash
				#
				declare -i evensum=0
				for i in $(seq 2 2 100); do
					let evensum=$[$evensum+i]
				done
				echo "Sumary:$evensum"
			计算100以内所有奇数之和；
				#!/bin/bash
				#
				declare -i oddsum=0
				for i in $(seq 1 2 100); do
					let oddsum=$[$oddsum+i]
				done
				echo "Sumary:$oddsum"
		练习：写一个脚本，新建20个用户，visitor1-visitor20;计算他们的ID之和；
		练习：写一个脚本，分别统计/etc/rc.d/rc.sysinit、/etc/rc.d/init.d/functions和/etc/fstab文件中以#号开头的行数之和，以及总的空白行数；
		练习：写一个脚本，显示当前系统上所有默认shell为bash的用户的用户名、UID以及此类所有用户的UID之和；
		练习：写一个脚本，显示当前系统上所有，拥有附加组的用户的用户名；并说明共有多少个此类用户；

bash脚本编程之条件测试：
	
	过程式编程语言
		顺序：逐条执行
		选择：只执行代码段某一部分
		循环：把某部分代码反复执行
	bash命令执行结束后有退出状态码：
		0-255：
			0：成功执行
			1-255：执行失败
		根据此前命令的退出状态来决定后续操作是否继续；获取此前命令退出状态的过程就称为条件测试；
		bash中的测试实现方式有两种：
			（1）直接根据前一个命令的退出结果做测试；
				测试成功与否意义与命令运行的返回值可能没有直接对应意义；
			（2）测试表达式：
				通常需要将其用命令的形式来进行表示；
					整数测试
					字符串测试
					文件测试
				转为命令格式：
					test EXPRESSION
					[ EXPRESSION ]
					[[ EXPRESSION ]]
			整数测试：
				双目操作符：需要两个操作数；
					$A -gt $B：大于
					-ge：大于等于
					-lt：小于
					-le：小于等于
					-ne：不等于
					-eq：等于
	练习：写一个脚本
		通过命令行传递一个参数给脚本，参数为用户名
		如果用的id号大于等于500，则显示此用户为普通用户；
			#!/bin/bash
			#
			user=$*
			userid=$(id -u $user)
			if [ $userid -ge 500 ]; then
				echo "This user is Normal User!"
			fi
	if语句的形式：
		if CONDITION;then
		fi
		if CONDITION; then
			分支1
		else
			分支2
		fi


	bash条件测试：
		条件式代码运行

		测试方式：
			（1）以前一条命令的退出状态码(布尔型值：真或假)作为测试条件；
			（2）测试表达式：转换为命令方式
				三种形式：
					test EXPRESSION
					[ EXPRESSION ]
					[[ EXPRESSION ]]
				三种常用的测试表达式：
					整数测试、字符串测试、文件测试

		整数测试：双目
			$A -gt $B
				-ge
				-ne
				-eq
				-lt
				-le

bash编程之条件测试（2）：
	
	bash中每个命令执行结束后都有退出码：
		0-255
			0：成功
			1-255：失败

	bash脚本自身运行结束也会有退出码：
		退出码取决于最后一跳运行的语句或命令的退出码；

		自定义脚本的退出码；
			exit [0-255]

			Note：脚本运行时，无论何时执行了exit，将结束当前bash进程;

	组合测试条件：
		条件取反：!

练习：写一个脚本
		通过命令行传递一个参数给脚本，参数为用户名
		如果用的id号大于等于500，则显示此用户为普通用户；

		#!/bin/bash
		#

		if [ $# -lt 1 ];then
			echo "Plz input a parament!"
			exit 2
		fi

		if ! id $1 &> /dev/null;then
			echo "No such user!"
			exit 1
		fi

		userid=$(id -u $1)

		if [ $userid -ge 500 ];then
			echo "This user is common user!"
		fi

练习：求100以内所有偶数之和；要求遍历100以内的所有正整数；
	#!/bin/bash
	#

	declare -i sum=0

	for ((i=1;i<=100;i++));do
		if [ $[$i%2] -eq 0 ];then
			let sum+=$i
		fi
	done
	echo "Even sum is $sum"

练习：写一个脚本
	传递一个以上的参数作为用户名给脚本；
	判断这些用户的UID是否与GID相同；相同则显示之；
	#!/bin/bash
	#

	if [ $# -lt 1 ];then
		echo "Plz input a parament!"
		exit 2
	fi

	for i in $@;do
		if ! id $i &> /dev/null;then
			echo "NO such user $i !"
			exit 1
		fi
	done

	for i in $@;do
		if ! id $i &> /dev/null;then
			echo "NO such user $i !"
			exit 1
		fi

		if [ $(id -u $i) -eq $(id -g $i)];then
			echo -n "UID same as GID:"
			echo "$i" 
		fi
	done

练习：写一个脚本
	（1）添加10用户user1-user10；密码同用户名；
	（2）用户不存在时才添加；存在时则跳过；
		#!/bin/bash
		#

		declare -i usercount=0
		for i in {1..10};do
			if ! id user$i &> /dev/null;then
				useradd user$i
				echo user$i | passwd --stdin user$i &> /dev/null
				let usercount++
				echo "Create user user$i finshed."
			fi
		done 
		echo "Total user added:$usercount"

练习：写一个脚本
	（1）用ping命令测试172.16.250.20-172.16.250.100以内有哪些主机在线，将在线的主机显示出来；
		#!/bin/bash
		#

		for ((i=10;i<=100;i++));do
			if ping -w 1 -c 1 172.16.250.$i &> /dev/null; then
				echo "162.16.250.$i is up."
			fi
		done


	双分支if语句：

		if CONDITION-is-TRUE;then
			分支1
		else
			分支2
		fi

		练习：写一个脚本
		（1）用ping命令测试172.16.250.20-172.16.250.100以内有哪些主机在线，将在线的主机显示出来；
			#!/bin/bash
			#

			for ((i=100;i<=150;i++));do
				if ping -w 1 -c 1 172.16.227.$i &> /dev/null; then
					echo -e "\033[32m172.16.227.$i\033[0m is up."
				else
					echo -e "\033[31m172.16.227.$i\033[0m is down"
				fi
			done

		练习：写一个脚本，遍历100以内所有正整数，并分别求出所有偶数与所有奇数之和；
			#!/bin/bash
			#

			declare -i evensum=0
			declare -i oddsum=0

			for ((i=1;i<=100;i++));do
				if [ $[$i%2] -eq 0 ];then
					let evensum+=$i
				else
					let oddsum+=$i
				fi
			done
			echo "Even sum is $evensum"
			echo "Odd sum is $oddsum"

		练习：写一个脚本,添加10个用户
		（1）如果用户存在，则说明其已经存在；
		（2）如果用户不存在，则添加之，并说明添加OK；
		（3）最后显示本次共添加了多少用户；
			#!/bin/bash
			#

			declare -i sum=0

			for i in {1..10};do
				if id user$i &> /dev/null;then
					echo "user 'user$i' already exists" 
				else 
					useradd user$i
					echo "Create 'user$i' OK!"
					let sum++
				fi
			done
			echo "Addet $sum user"


		练习：写一个脚本，传递n个正整数给脚本，返回其最大值和最小值；
			#!/bin/bash
			#

			if [ $# -lt 1 ];then
				echo "1 parmater."
				exit 1
			fi

			declare -i minimum=$1
			declare -i maximum=$1

			for i in $@;do
				if [ $i -gt $maximum ];then
					let maximum=$i
				fi

				if [ $i -lt $minimum ];then
					let $minimum=$i
				fi
			done

			echo "Maximun is $maximum; Minimum is $minimum"

		练习：打印九九乘法表；
			#!/bin/bash
			#

			for i in {1..9};do
				for j in {1..9};do
					if [ $i -ge $j ];then
						echo -n -e "${j}X${i}=$[$i*$j]\t"
					fi
				done
				echo
			done

			#!/bin/bash
			#

			for ((i=1;i<=9;i++));do
				for ((j=1;j<=$i;j++));do
					echo -n "${i}X${j}=$[$i*$j] "
				done
				echo
			done

	字符串测试：$str1, $str2
		双目：
			"$str1" > "$str2"：测试str1是否大于str2，是为真，不是则为假；
			<：是否小于；
			==：是否等于；
			!=：都否不等于；

		单目：
			-z "$str1"：测试str1字符串是否为空，空则为真，不空则为假；
			-n "$str1"：测试str1字符串是否为不空，不空则为真，空则为假；

		模式匹配测试：
			"$str1" =~ PATTERN：
				如果str1字符串能够被后面的模式所匹配则为真，否则为假；

		练习：写一个脚本，判断当前系统上所有用户的shell是否为可登录shell（即用户的shell不是/sbin/nologin），分别统计这两类用户的个数；通过字符串比较来实现；
			#!/bin/bash
			#
			declare -i loginshell=0
			declare -i nologin=0

			for shell in $(cut -d: -f7 /etc/passwd);do
				if [ "$shell" == '/sbin/nologin' ];then
					let nologin++
				else
					let loginshell++
				fi
			done

			echo "Login shell Users:$loginshell,No login shell Users:$nologin"

		练习：写一个脚本
			（1）获取当前主机的主机名，保存于hostname变量中；
			（2）判断此变量的值是否为localhost，如果是，则将当前主机名修改为www.magedu.com；
			（3）否则，则显示当前主机名；
				#!/bin/bash
				#

				host=$(hostname)

				if [ "$host" == 'localhost' ];then
					hostname www.magedu.com
					echo "The hostname is:$(hostname)."
				else
					echo "The hostname is:$host."
				fi

		练习：写一个脚本，完成如下功能
			（1）传递一个磁盘文件路径给脚本，判断此设备是否存在：
			（2）如果存在，则显示此设备上的所有分区信息；
				#!/bin/bash
				#

				if ! [[ "$1" =~ ^/dev/[sh]d[a-z]$ ]]; then
					echo "Not a device file."
					exit 1
				fi

				if fdisk -l /dev/[hs]d[a-z] | grep "^Disk" | grep "$1" &> /dev/null; then
					fdisk -l $1
				else
					echo "No such device!"
				fi

	多分支的if语句：
		语法结构：
			if CONDITION1-is-TRUE;then
				分支1
			elif CONDITIO2-is-TRUE;then
				分支2
			elif CONDITION3-is-TRUE;then
				分支3
			...
			...
			else
				分支n
			fi

		Note：
			(1)测试自上而下逐条件进行；
			(2)遇到符合条件的，即遇到某为真的测试条件后，将不再进行后续的条件测试；

		示例；写一个脚本，完成如下功能
			脚本能够接受一个参数：
			（1）如果参数1为quit，则显示退出脚本，并执行正常退出；
			（2）如果参数1为yes，则显示继续执行脚本；
			（3）否则，参数1为其它任意值，均执行非正常退出；
				#!/bin/bash
				#

				if [[ "$1" =~ ^QUIT|Quit|quit$ ]];then
					echo "Finished."
					exit 0
				elif [ "$1" == 'yes' ];then
					echo "Continue"
				else
					echo "Unknow parameter!"
					exit 1
				fi

		练习：写一个脚本，完成如下功能
			传递一个参数给脚本，此参数为gzip、bzip2或者xz三者之一；
			（1）如果参数1的值为gzip，则使用tar和gzip归档压缩/etc目录至/backups目录中，并命名为/backups/etc-20150413.tar.gz;
			（2）如果参数1的值为zip2，则使用tar和zip2归档压缩/etc目录至/backups目录中，并命名为/backups/etc-20150413.tar.bz2;
			（3）如果参数1的值为xz，则使用tar和xz归档压缩/etc目录至/backups目录中，并命名为/backups/etc-20150413.tar.xz;
			（4）其它任意值，则显示错误的压缩工具，并执行非正常退出； 

bash编程中的条件测试：
	条件测试：真，假

	bash中的条件测试；
		(1) 命令的执行状态结果，即命令成功与否；
			0：成功
			1-255：失败

			在if语句上的用法：
				if COMMAND &> /dev/null;then
				fi

		(2) 条件测试表达式
			test EXPRESSION
			[ EXPRESSION ]
			[[ EXPRESSION ]]
				在if语句上的用法：
					if 条件测试表达式格式调用;then

	条件测试：
		整数测试：
			-eq, -ne, -lt, -le, -gt, -ge
		字符串测试：
			>, <, =, !=, =~
			-n, -z
		文件测试：
			文件存在性及类型：-e, -f, -d, -h, -L, -b, -c, -S, -p
			文件属组、属组及权限：-O, -G, -x, -r, -w, -u, -g, -k
			文件时间戳：
				-N
				-nt, -ot
			硬链接：-ef 

	组合测试条件1：组合测试表达式
		或：-o ，[ COND_EXPR1 -o COND_EXPR2]
		与：-a
		非：！

		[ "$hname" == "localhost" -o "$hname" == "(none)"]

	组合测试条件2：组合测试语句
		与：&&
		或：||
		非：!

		[ "$hname" == "localhost" ] || [ "$hname" == "(none)" ]

		短路操作符：
			COND1 && COND2：
				COND1为“假”时，最终结果一定为“假”，因此COND2不用再测试；
				COND1为“真”时，最终结果取决于COND2，因此COND2一定会测试；

				由此，其相当于
					if COND1;then
						COND2
					fi

			COND1 || COND2：
				COND1为“假”时，最终结果取决于COND2，因此COND2一定会测试；
				COND1为“真”时，最终结果一定为“真”，因此COND2不用再测试；
					~]# [ -d /tmp/test ] || mkdir /tmp/test

					由此，相当于
						if ! COND1;then
							COND2
						fi

		多分支if语句：
			if CONDITION1-TRUE;then
				分支1
			elif CONFITION2-TRUE;then
				分支2
			elif ONFITION3-TRUE;then
				分支3
			...
			...
			else 
				分支n
			fi

			如果多个测试条件中是对同一个条件的多个不同取值进行测试，可替换简洁版的case；

	case语句：
		case 变量引用 in
			PATTERN1)
				分支1
				;;
			PATTERN2)
				分支2
				;;
			...
			*)
				分支n
				;;
		ecac

			PATTERN可使用通配符：
				*：任意长度任意字符；
				?：任意单个字符；
				[]：指定范围内的任意单个字符；
				a|b|c：或者

	练习：写一个脚本
		能接受四个参数：start, stop, restart, status
			start：输出"starting 脚本名 finished。"
			...
			其它任意参数，均报错退出；

			[root@vBird scripts]# cat mysrc.sh 
			#!/bin/bash
			#

			svc=$(basename $0)
			lockfile=/tmp/$svc

			case $1 in
				start)
					if [ -e $lockfile ]; then
						echo "$svc running"
						exit 0
					else
						echo "starting $svc finished."
						touch $lockfile && exit 0
					fi
					;;
				stop)
					echo "stoping $svc finished."
					;;
				restart)
					echo "restarting $svc finished."
					;;
				status)
					echo "running or stopped."
					;;
				*)
					echo "Usage: $svc {start|stop|restart|status}"
					exit 1
					;;
			esac


bash脚本编程：
	1、交互式编程
		read [-ers] [-a aname] [-d delim] [-i text] [-n nchars] [-N nchars] [-p prompt] [-t timeout] [-u fd] [name ...]
			 -p：prompt，输入提示符；
			 	[root@vBird ~]# read -p "Plz inout a user name:" name
				Plz inout a user name:Jerry
				[root@vBird ~]# echo $name
				Jerry
			-t：timeout，超时时间，单位秒；
			-a：arry
				name为属组，而非变量
			-A：array	
				name为关联数组；

		示例：
			1、写一个脚本，显示用户选定要查看的信息；
				cpu) display cpu info
				mem) display memory info
				disl) display disk info
				*)quit
					[root@vBird scripts]# cat sysinfo.sh 
					#!/bin/bash
					#

					cat << EOF
					==========Menu==========
					cpu) display cpu info
					mem) display memory info
					disk) display disk info
					*) quit
					==========Menu==========
					EOF

					read -p "Your option:" option

					case $option in
						cpu)
							lscpu ;;
						mem)
							free ;;
						disk)
							fdisk -l /dev/[hs]d[a-z];;
						*)
							echo "Wrong option"
							exit 1
					esac

			2、写一个脚本，提示用户输入一个用户名：
				在用户存在时，判断其UID是否同GID；
				同，则显示“Good guy”，不同，则显示“Bad guy”；

				[root@vBird scripts]# cat showuserdebug.sh 
				#!/bin/bash
				#

				read -p "Plz enter a user name:" name

				! id $name &> /dev/null && echo "No this user." && exit 1

				if [ `id -u $name` == `id -g $name` ];then
					echo "God guy"
				else 
					echo "Bab guy"
				fi

				第二种实现方式：
					[ `id -u $name` == `id -g $name` ] && echo "good guy" || echo "bad buy"

	2、循环
		循环执行：for
			for var_name in list; do
			for ((i=0;i<=100;i++)); do

		(1) while循环：

			while CONDITION; do
				循环体
				循环控制变量的修正表达式
			done

			其中，“CONDITION”，当条件测试结果为“真”，则进入循环，为“假”时，终止循环；
				循环控制变量要用于CONDITION中，以实现循环条件构建；

			示例：求100以内正整数之和；
				[root@vBird scripts]# cat sum9.sh 
				#!/bin/bash
				#

				declare -i sum=0
				declare -i i=1

				while [ $i -le 100 ];do
					let sum+=$i
					let i++
				done

				echo "$sum"
				
			示例：添加10个用户，user1-user10
				[root@vBird scripts]# cat user6.sh 
				#!bin/bash
				#

				declare -i i=1

				while [ $i -le 10 ];do
					! id user$i &> /dev/null && useradd user$i && echo "Add user$i finished." || echo "user$i exists"
					let i++
				done

			示例：打印九九乘法表
				[root@vBird scripts]# cat mul.sh 
				#!bin/bash
				#
				declare -i i=1
				declare -i j=1

				while [ $i -le 9 ];do
					let j=1
					while [ $j -le $i ]; do
						echo -n -e "${j}X${i}=$[$i*$j]\t"
						let j++
					done

					echo 
					let i++
				done

			示例：写一个脚本，判断给定的用户是否登录了当前系统；
				(1) 如果登录了，则显示用户登录，脚本终止；
				(2) 每3秒钟，查看一次用户是否登录；
					[root@vBird scripts]# cat login.sh 
					#!/bin/bash
					#
					read -p "PLz enter a user name:" name

					who | grep "^$name\>" &> /dev/null
					status=$?

					while [ $status -ne 0 ]; do
						sleep 3
						who | grep "^$name\>" &> /dev/null
						status=$?
					done

					echo "$name is here."

					第二种：
						root@vBird scripts]# cat login.sh 
						#!/bin/bash
						#
						read -p "PLz enter a user name:" name

						while ! who | grep "^$name\>" & /dev/null; do
							sleep 3
						done

						echo "$name is here."

			示例：写一个脚本，显示用户选定要查看的信息；
				cpu) display cpu info
				mem) display memory info
				disl) display disk info
				quit)quit
				非此四项选择，则提示错误，并要求用户重新选择，直到其给出正确的选择为止；
					[root@vBird scripts]# cat sysinfo2.sh 
					#!/bin/bash
					#

					cat  << EOF
					==========Menu==========
					cpu) display cpu info
					mem) display memory info
					disk) display disk info
					quit) quit
					==========Menu==========
					EOF

					read -p "Your option:" option

					while [ $option != 'cpu' -a $option != 'mem' -a $option != 'disk' -a $option != 'quit' ];do
						echo "Wrong option."
						read -p "Your option again:" option
					done

					case $option in
						cpu)
							lscpu ;;
						mem)
							free ;;
						disk)
							fdisk -l /dev/[sh]d[a-z] ;;
						quit)
							exit 0 
					esac

		(2) until循环

			until CONDITION; do
				循环体
				控制变量修正语句
			done

			CONDITION条件为“假”时，执行循环；为“真”时退出循环；

			示例：100以内所有正整数之和：
				#!/bin/bash
				#

				declare -i sum=0
				declare -i i=1

				until [ $i -gt 100 ];do
					let sum+=$i
					let i++
				done

				echo "$sum"

			示例：添加10个用户，tuser1-tuser10；


		(3) while循环的特殊用法：
			（a）用于遍历指定文件的每一行：
				while read 变量名；do
					循环体
				done < /PATH/TO/SOMEFILE

				变量用于保存一行数据；直到遇到文件尾，数据终止，循环退出；

				示例：找出其UID为偶数的用户，显示用户名和其UID；
					[root@vBird scripts]# cat userinfo.sh 
					#!/bin/bash
					#

					[ $UID -ne 0 ] && echo "Only root can excute this script." && exit 1

					while read line;do
						userid=$(echo $line | cut -d: -f3)
						if [ $[$userid%2] -eq 0 ];then
							echo $line | cut -d: -f1,3
						fi
					done < /etc/passwd

				示例：将给定文件的偶数行内字符统统修改为大写之后输出；
					[root@vBird scripts]# cat displayfile.sh 
					#!/bin/bash
					#

					declare -i linenumber=1
					read -p "Plz enter a file path:" file

					while read line;do
						if [ $[$linenumber%2] -eq 0 ];then
							echo -n "$linenumber "
							echo $line | tr 'a-z' 'A-Z'
						fi
						let linenumber++
					done < $file

			(b) 死循环
				while true;do
					循环体
				done

		循环控制：
			break [N]：结束循环；
				退出当前循环；N表示循环嵌套层次；
			continue [N]：提前结束本轮循环，而直接下一轮循环条件判断

				whille CONDITION1;do
					statement1
					...
					if CONDITION2;then
						break [N]
					fi
					statementN
					statementN+1
					...
				done 

				示例：求100以内所有偶数之和；
					[root@vBird scripts]# cat cont.sh 
					#!/bin/bash
					#

					declare -i evensum=0
					declare -i i=0

					while [ $i -le 100 ];do
						let i++
						if [ $[$i%2] -eq 1 ];then
							continue
						fi
						let evensum+=$i
					done
					echo "$evensum"

				示例：判断用户centos是否登录，如果登录则显示之；否则，每3秒查看centos是否登录；
					[root@vBird scripts]# cat userinfo.2.sh 
					#!/bin/bash
					#

					user='centos'
					while true;do
						if who | grep "^$user\>" &> /dev/null;then
							break
						fi
						sleep 3
					done

					echo "$user is here."

	函数：function，功能
		把一段代码组织成一个独立个体，并且被赋予了名字；需要用到此段代码时，只需要执行处给出名字（函数名）即可；
			提高代码重用率
			模块化编程

		语法结构：
			function f_name {
				函数体

			}	

			f_name(){
				函数体
			}

		调用函数：函数名
			函数名出现的地方，自动替换为函数代码；

			注意：函数不调用，其不会被执行；

		函数的返回值：
			函数执行过程结果向调用者的回馈；
				（a）显示使用echo或printf命令
				（b）函数中某些命令运行结果产生的输出；
			函数退出状态码：
				默认其退出码取决于函数体最后执行的那个语句的退出状态码；
				自定义退出状态码：
					return [N]
						0-255
							0：成功
							1-255：失败

					注意：函数运行时，一旦遇到return语句即会突出整个函数的运行；

			函数可接受参数：
				调用函数时，可以传递参数给函数，传递方法类似向脚本传递参数的方法，例如
					f_name arg1 arg2 arg3 ...

					在函数中可使用$1,$2,...来调用这些参数；
					可在函数中使用特殊变量：
									$#：参数个数
									$@：参数列表
									$*：参数列表

			练习：写一个脚本
				(1)用函数实现返回一个用户的UID和SHELL；用户名通过参数传递而来；
				(2)提示用户输入一个用户名或输入“quit”退出；
					当输入的是用户名，则调用函数显示用户信息；
					当用户输入quit，则退出脚本；
						[root@vBird scripts]# cat userinfo.3.sh 
						#!/bin/bash
						#

						getUserInfo() {
							[ $# -lt 1 ] && echo "one argument at least" && return 1
							
							! id $1 >& /dev/null && echo "No such user." && return 2

							grep "^$1\>" /etc/passwd | cut -d: -f3,7

							[ $? -eq 0 ] && return 0 || return 3
						}

						read -p "Plz enter a user nae or 'quit':" name

						if [ "$name" == 'quit' ];then
							exit 0
						else
							getUserInfo $name
						fi

				进一步地：显示键入的用户相关信息后，再次提醒输出用户名或quit
						[root@vBird scripts]# cat userinfo.3.sh
						#!/bin/bash
						#

						getUserInfo() {
							[ $# -lt 1 ] && echo "one argument at least" && return 1
							
							! id $1 >& /dev/null && echo "No such user." && return 2

							grep "^$1\>" /etc/passwd | cut -d: -f3,7

							[ $? -eq 0 ] && return 0 || return 3
						}

						while true; do
							read -p "Plz enter a user nae or 'quit':" name

							if [ "$name" == 'quit' ];then
								exit 0
								break
							else
								getUserInfo $name
							fi
						done


			练习：写一个脚本，完成如下功能（使用函数）
				（1）提示用户输入一个可执行命令的名字；获取此命令依赖的所有库文件；
				（2）复制命令文件至/mnt/sysroot目录下的对应的rootfs的路径上，例如，如果复制的文件路径是/usr/bin/useradd，则复制到/mnt/sysroot/usr/bin/目录中；
				（3）复制此命令依赖的各库文件至/mnt/sysroot目录下的对应的rootfs的路径上，规则同上面命令相关的要求；

bash脚本编程：

	函数：
		function f_name {
			函数体
		}

		f_name() {
			函数体
		}

		(1) 模块化编程；
		(2) 代码结构更清晰；
		...

	变量类型：
		本地变量、环境变量、局部变量、特殊变量、位置变量

		局部变量：作用域为函数上下文的变量
			local V_NAME=VALUE

	函数递归：
		函数直接或间接调用函数本身；

		斐波那契数列：1 1 2 3 5 8 13
		阶乘：n!=n*(n-1)!=n*(n-1)*(n-2)!
			#!/bin/bash
			#
			fact() {
			    if [ $1 -eq 0 -o $1 -eq 1 ]; then
			        echo 1
			    else
			        echo $[$1*$(fact $[$1-1])]
			    fi
			}

			fact 4	
			
	数组：
		数组：变量阵列，通过同一个名字进行存取操作；
			连续的多个独立的内存空间（元素），每个内存空间相当于一个变量；
			数组元素：数组名[索引]
				索引：从0开始编号

		声明数组：
			declare -a Array_Name

		bash的数组支持稀疏格式；

		数组元素赋值：
			(1) 一次只赋值一个元素
				a_name[index]=value

				weekday[0]="Sunday"
				weekday[1]="Monday"

			(2) 一次赋值全部元素
				weekday=("Sunday" "Monday" "Tuesday")

			(3) 指定索引进行赋值
				weekdays=([0]="Sunday" [3]="Thu" [6]="Sat")

					# echo ${weekdays[0]}
					Sunday

			(4) read -a a_name
				# read -a hello
				a bc mn
				# echo ${hello[0]}
				a


		引用数组元素：${array_name[index]}

		获取数组长度：${#array[*]}, ${#array[@]}
			即数组中元素的个数；
				# echo ${#hello[*]}
				3

		练习：写一个脚本，生成10个随机数，保存至数据组中；而后显示数组索引为偶数的元素的值；

			#!/bin/bash
			#
			for ((i=0;i<10;i++)); do
			    rand[$i]=$RANDOM
			    echo ${rand[$i]}
			done

			echo "========================"

			for i in `seq 0 2 9`; do
			    echo ${rand[$i]}
			done


		练习：写一个脚本
			定义一个数组，数组元素为/var/log目录下所有以.log结尾的文件的名字；显示每个文件的行数；

				#!/bin/bash
				#
				declare -a files

				files=(/var/log/*.log)

				for i in `seq 0 $[${#files[*]}-1]`; do
				    wc -l ${files[$i]}
				done

		课外练习：写一个脚本，生成10个随机数；排序它们；
			冒泡排序：
				#!/bin/bash
				#

				for ((i=0;i<10;i++));do
					rand[$i]=$RANDOM
					echo ${rand[$i]}
				done

				echo "==============="

				declare -i tmp

				for ((j=0;j<10;j++)); do
				    for ((i=0;i<10-1-j;i++));do
					if [ ${rand[$i]} -gt ${rand[$i+1]} ]; then
					tmp=${rand[$i]}
					rand[$i]=${rand[$i+1]}
					rand[$i+1]=$tmp
					fi
				    done
				done
					
				for i in `seq 0 9`;do
					echo ${rand[i]}
				done


		数组切片：从数组中挑选指定的某个或某些元素：
			${array[@]:offset:number}

				offset: 偏移的元素的个数；
				number：要取出的元素的个数；
					# weekdays=("Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat")
					# echo ${weekdays[@]:2:2}
					Tue Wed

			${array[@]:offset}
				取出偏移量之后剩余所有的元素；
					# echo ${weekdays[@]:2}
					Tue Wed Thu Fri Sat

			${array[@]}
				# echo ${weekdays[@]}
				Sun Mon Tue Wed Thu Fri Sat

		从数组中删除元素：
			unset array[index]
				# unset weekdays[3]
				# echo ${weekdays[@]}
				Sun Mon Tue Thu Fri Sat

		bash从4.0版本起支持关联数组：
			数组索引可为自定的字符串；

			定义方法：declare -A array_name
				# wdays=([sun]="sunday" [mon]="Monday" [tue]="Tuesday")
				# echo ${wdays[sun]}
				sunday

		练习：写一个脚本，能从所有同学中随机挑选一个同学回答问题；
				#!/bin/bash
				#
				students=("Tom" "Jerry" "Jack" "Charles" "Horace" "George" "Hunter" "Bill" "Dennis" "Asher")
				random=$((RANDOM % ${#students[@]}))
				echo "Please ${students[$random]} answer this questions."
                                                        
			进一步地：可接受一个参数，做为要挑选的同学的个数；

	bash的字符串处理：

		字符串切片：${var:offset:length}
			# mypath="/etc/sysconfig/network-scripts/"
			# echo ${mypath:5}
			sysconfig/network-scripts/

			取出字符串的最后几个字符：${var: -length}
				注意：-length之前有空白字符；
					# echo ${mypath: -10}
					k-scripts/

		基于模式取子串：
			${var#*word}：自左而右，查找var变量中存储的字符串中第一次出现的由word所指明的字符，删除此字符及其左侧的所有内容；
				# echo ${mypath#*s}
				ysconfig/network-scripts
			${var##*word}：自左而右，查找var变量中存储的字符串中最后一次出现的由word所指明的字符，删除此字符及其左侧的所有内容；
				# mypath="/etc/sysconfig/network-scripts"
				# echo ${mypath##*/}
				network-scripts
			${var%word*}：自右而左，查找var变量中存储的字符串中第一次出现的由word所指明的字符，删除此字符及其右侧的所有内容；
				# echo ${mypath%c*}
				/etc/sysconfig/network-s
			${var%%word*}：自右而左，查找var变量中存储的字符串中最后一次出现的由word所指明的字符，删除此字符及其右侧的所有内容；
				# echo ${mypath%%c*}
				/et

			示例：
				url="http://www.magedu.com:80"

				取端口：echo ${url##*:}
				取协议：echo ${url%%:*}

		查找替换：
			${var/pattern/replacement}：查找var变量存储的字符中第一次由pattern匹配到的内容，并替换为replacement；
				# url="http://www.magedu.com:80"
				# echo ${url/www/WWW}
				http://WWW.magedu.com:80
			${var//pattern/replacement}：查找var变量存储的字符中所有能够由pattern匹配到的内容，并替换为replacement；
				# echo ${url/w/W}
				http://Www.magedu.com:80
				# echo ${url//w/W}
				http://WWW.magedu.com:80
			${var/#pattern/replacement}：查找var变量存储的字符中最开始处能够由pattern匹配到的内容，并替换为replacement；
				# echo ${url/#h/H}
				Http://www.magedu.com:80
			${var/%pattern/replacement}：查找var变量存储的字符中最后位置能够由pattern匹配到的内容，并替换为replacement；
				# echo ${url/%0/9}
				http://www.magedu.com:89

		查找删除：

			${var/pattern}：查找var变量存储的字符中第一次由pattern匹配到的内容，并删除；
			${var//pattern}：查找var变量存储的字符中所有能够由pattern匹配到的内容，并删除；
			${var/#pattern}：查找var变量存储的字符中最开始处能够由pattern匹配到的内容，并删除；
			${var/%pattern}：查找var变量存储的字符中最后位置能够由pattern匹配到的内容，并删除；

		字符串大小写转换：
			${var^^}：把var变量中的所有小写字母，统统替换为大写；
				# echo ${url^^}
				HTTP://WWW.MAGEDU.COM:80
			${var,,}：把var变量中的所有大写字母，统统替换为小写；
				# echo $url
				HTTP://WWW.MAGEDU.COM:80
				# echo ${url,,}
				http://www.magedu.com:80

		变量赋值：
			${var:-word}：如果变量var为空或未声明，则返回word所表示的字符串；否则，则返回var变量的值；
			${var:=word}：如果变量var为空或未声明，则返回word所表示的字符串，并且把word赋值给var变量；否则，则返回var变量的值；
			${var:?error}：如果变量var为空或未声明，则返回error为错误信息；否则，则返回var变量的值；
			${var:+word}：如果变量var为空或未声明，忽略；否则，则返回word；


